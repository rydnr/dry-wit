#!/usr/bin/env dry-wit
# Copyright 2016-today Automated Computing Machinery S.L.
# Distributed under the terms of the GNU General Public License v3
# mod: dry-wit-test
# api: public
# txt: Framework for unit testing Bash scripts.

#set -o xtrace

# env: TESTS: The tests
declare -agx TESTS;

# The associative arrays
# env: TEST_ERRORS: The test errors.
declare -Agx TEST_ERRORS;
# env: TEST_ERROR_MESSAGES: The error messages.
declare -Agx TEST_ERROR_MESSAGES;
# env: TEST_FAILURES: The test failures.
declare -Agx TEST_FAILURES;
# env: TEST_SUCCESSES: The passing tests.
declare -Agx TEST_SUCCESSES;
# env: TEST_FAILURE_MESSAGES: The messages of the failing tests.
declare -Agx TEST_FAILURE_MESSAGES;
# env: TEST_ASSERTION_FAILURES: The failing asserts.
declare -Agx TEST_ASSERTION_FAILURES;
# env: TEST_ASSERTION_SUCCESSES: The passing asserts.
declare -Agx TEST_ASSERTION_SUCCESSES;
# env: TEST_ASSERTION_LINE_NUMBERS: The line numbers of the asserts.
declare -Agx TEST_ASSERTION_LINE_NUMBERS;
# env: TEST_ASSERTION_FAILURE_MESSAGES: The messages of the failing asserts.
declare -Agx TEST_ASSERTION_FAILURE_MESSAGES;
# env: TEST_ASSERTION_FAILURE_CONTEXT: The context of the failing asserts.
declare -Agx TEST_ASSERTION_FAILURE_CONTEXT;
# env: TESTS_FOUND: The number of tests found.

addError TEST_WITH_FAILED_ASSERTIONS "Test with failed assertions";
addError TEST_WITH_NO_ASSERTIONS "Test with no assertions";
addError NO_TESTS_FOUND "No tests found";
addError TEST_FAILED "Test failed"

# fun: DRYWITTEST.retrieveTests script
# api: private
# txt: Retrieves all available tests.
# opt: script: The script name.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the space-separated list of tests found.
# use: DRYWITTEST.retrieveTests "dry-wit"; echo "Tests found: ${RESULT}";
function DRYWITTEST.retrieveTests() {
  local _script="${1}";
  checkNotEmpty script "${_script}" 1;
  local _functions="$(typeset -f | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')";
  local _oldIFS="${IFS}";

  if isEmpty "${_functions}"; then
    exitWithErrorCode NO_TESTS_FOUND;
  fi

  IFS="${DWIFS}";
  for _f in ${_functions}; do
    IFS="${_oldIFS}";
    if [ "${_f%*_test}" != "${_f}" ] && [ "${_f}" != "_test" ]; then
      TESTS[${#TESTS[@]}]="${_f}";
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${TESTS[@]}"; then
    exitWithErrorCode NO_TESTS_FOUND;
  fi

  echo "export TESTS_FOUND=${#TESTS[@]};" > ".$(basename ${_script}).env";

  export RESULT="${TESTS[@]}";
}

# fun: DRYWITTEST.addTestError test
# api: private
# txt: Annotates a new error when executing a test.
# txt: Note: This function is used by dry-wit itself.
# opt: test: The test.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.addTestError "my_test" "my_test failed";
function DRYWITTEST.addTestError() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local _message="${2}";
  checkNotEmpty message "${_message}" 2;
  local -i _count;
  local -i _index;

  _count=${TEST_ERRORS[${_test}]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_ERRORS["${_test}"]=${_count};
  TEST_ERROR_MESSAGES["${_test}:${_index}"]="${_message}";
}

# fun: DRYWITTEST.removeTestError test
# api: private
# txt: Removes a detected error for a given test, since it expected in an assertErrorThrown.
# opt: test: The test.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.removeTestError "my_test";
function DRYWITTEST.removeTestError() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _count;
  local -i _index;

  _count=${TEST_ERRORS[${_test}]};
  if ! isEmpty "${_count}"; then
    _index=${_count};
    _count=$((_count-1));
    TEST_ERRORS["${_test}"]=${_count};
    TEST_ERROR_MESSAGES["${_test}:${_index}"]="";
  fi
}

# fun: DRYWITTEST.addTestFailure test message
# api: private
# txt: Annotates a new failed test.
# opt: test: The test name.
# opt: message: The message.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.addTestFailure "my_test" "Failed assertions";
function DRYWITTEST.addTestFailure() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local _message="${2}";
  checkNotEmpty message "${_message}" 2;
  local -i _count;
  local -i _index;

  _count=${TEST_FAILURES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_FAILURES["${_test}"]=${_count};
  TEST_FAILURE_MESSAGES["${_test}:${_index}"]="${_message}";
}

# fun: DRYWITTEST.addTestSuccess test
# api: private
# txt: Annotates a new passed test.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.addTestSuccess "my_test";
function DRYWITTEST.addTestSuccess() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _count;

  _count=${TEST_SUCCESSES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _count=$((_count+1));

  TEST_SUCCESSES["${_test}"]=${_count};
}

# fun: DRYWITTEST.addTestAssertionFailure test message
# api: private
# txt: Annotates a new failed test assertion.
# opt: test: The test name.
# opt: message: The error message.
# opt: extra: Additional context information (optional).
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.addTestAssertionFailure "my_test" "Should not fail";
function DRYWITTEST.addTestAssertionFailure() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local _message="${2}";
  checkNotEmpty message "${_message}" 2;

  local _extra="${3}";
  local _lineNumber="${BASH_LINENO[1]}";
  local -i _count;
  local -i _index;

  _count=${TEST_ASSERTION_FAILURES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _index=${_count};
  _count=$((_count+1));

  TEST_ASSERTION_FAILURES["${_test}"]=${_count};
  TEST_ASSERTION_LINE_NUMBERS["${_test}:${_index}"]=${_lineNumber};
  TEST_ASSERTION_FAILURE_MESSAGES["${_test}:${_index}"]="${_message}";
  if isNotEmpty "${_extra}"; then
    TEST_ASSERTION_FAILURE_CONTEXT["${_test}:${_index}"]="${_extra}";
  fi
}

# fun: DRYWITTEST.addTestAssertionSuccess test
# api: private
# txt: Annotates a new passed test assertion.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.addTestAssertionSuccess "my_test";
function DRYWITTEST.addTestAssertionSuccess() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _count;

  _count=${TEST_ASSERTION_SUCCESSES["${_test}"]};
  if isEmpty "${_count}"; then
    _count=0;
  fi
  _count=$((_count+1));
  TEST_ASSERTION_SUCCESSES["${_test}"]=${_count};
}

# fun: retrievePassingTestAssertions test
# api: public
# txt: Retrieves the number of passing assertions for given test.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the passing asserts.
# use: retrievePassingTestAssertions "my_test"; echo "my_test: ${RESULT} assertions passed"
function retrievePassingTestAssertions() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _result;

  _result=${TEST_ASSERTION_SUCCESSES["${_test}"]};
  if isEmpty "${_result}"; then
    _result=0;
  fi

  export RESULT="${_result}";
}

# fun: retrieveFailedTestAssertions test
# api: public
# txt: Retrieves the number of failed assertions for given test.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the failing assertions.
# use: retrieveFailedTestAssertions "my_test";
function retrieveFailedTestAssertions() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _result;

  _result=${TEST_ASSERTION_FAILURES["${_test}"]};
  if isEmpty "${_result}"; then
    _result=0;
  fi

  export RESULT="${_result}";
}

# fun: DRYWITTEST.allAssertionsPassed test
# api: private
# txt: Checks whether all assertions passed for given test.
# opt: test: The test.
# txt: Returns 0/TRUE if all assertions passed; 1/FALSE otherwise.
# use: if DRYWITTEST.allAssertionsPassed "my_test"; then echo "Hurray!"; fi
function DRYWITTEST.allAssertionsPassed() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _failed;
  local -i _rescode;

  retrieveFailedTestAssertions "${_test}";
  _failed=${RESULT};

  if [ ${_failed} -eq 0 ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: DRYWITTEST.noAssertionPassed test
# api: private
# txt: Checks whether all assertions passed for given test.
# opt: test: The test.
# txt: Returns 0/TRUE if all assertions passed; 1/FALSE otherwise.
# use: if DRYWITTEST.noAssertionsPassed "my_test"; then echo "Too bad!"; fi
function DRYWITTEST.noAssertionsPassed() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _passing;
  local -i _rescode;

  retrievePassingTestAssertions "${_test}";
  _passing=${RESULT};

  if [ ${_passing} -eq 0 ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: DRYWITTEST.noAssertionsDefined test
# api: private
# txt: Checks whether given test defined no assertions.
# opt: test: The test.
# txt: Returns 0/TRUE if the test includes no assertions; 1/FALSE otherwise.
# use: if DRYWITTEST.noAssertionsDefined "my_test"; then echo "Error: no assertions defined in my_test"; fi
function DRYWITTEST.noAssertionsDefined() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;
  local -i _failed;
  local _i _passing;
  local -i _rescode;

  if DRYWITTEST.allAssertionsPassed "${_test}"; then
    if DRYWITTEST.noAssertionsPassed "${_test}"; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: runTest test
# api: public
# txt: Runs given test.
# opt: test: The test to run.
# txt: Returns 0/TRUE if the test passes; 1/FALSE otherwise.
# use: if run_test "my_test"; then echo "my_test passes"; fi
function runTest() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  local _assertions;
  local -i _rescode;

  if isFunctionPresent "test_setup"; then
    test_setup;
  fi

  #  ${_test} > /dev/null 2>&1;
  ${_test}
  if isTrue $?; then
    if DRYWITTEST.noAssertionsDefined "${_test}"; then
      DRYWITTEST.addTestFailure "${_test}" TEST_WITH_NO_ASSERTIONS;
      _rescode=${FALSE};
    elif DRYWITTEST.allAssertionsPassed "${_test}"; then
      DRYWITTEST.addTestSuccess "${_test}";
      _rescode=${TRUE};
    else
      DRYWITTEST.addTestFailure "${_test}" TEST_WITH_FAILED_ASSERTIONS;
      _rescode=${FALSE};
    fi
  else
    DRYWITTEST.addTestError "${_test}" TEST_FAILED;
  fi

  if isFunctionPresent "test_tearDown"; then
    test_tearDown;
  fi

  return ${_rescode};
}

# fun: DRYWITTEST.annotateTestSuccess test
# api: private
# txt: Annotates a test success.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.annotateTestSuccess "my_test";
function DRYWITTEST.annotateTestSuccess() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  DRYWITTEST.addTestSuccess "${_test}";
}

# fun: DRYWITTEST.retrieveTestsWithIssues
# api: private
# txt: Retrieves tests with issues of some kind.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the space-separated names of the tests with some issues.
# use: DRYWITTEST.retrieveTestsWithIssues;
function DRYWITTEST.retrieveTestsWithIssues() {
  local _result="";
  local _test;
  local _errors;
  local _failures;
  local _successes;
  local _assertionFailures;
  local _assertionSuccesses;
  local _oldIFS="${IFS}";

  IFS=$' \t\n';
  for _test in ${TESTS[@]}; do
    IFS="${_oldIFS}";
    _errors="${TEST_ERRORS[${_test}]}";
    _failures="${TEST_FAILURES[${_test}]}";
    _assertionFailures="${TEST_ASSERTION_FAILURES[${_test}]}";

    if ! isEmpty "${_errors}" || ! isEmpty "${_failures}" || ! isEmpty "${_assertionFailures}"; then
      _result="${_result} ${_test}";
    fi
  done
  IFS="${_oldIFS}";

  export RESULT="${_result}";
}

### REPORTING

# fun: DRYWITTEST.logSummary
# api: private
# txt: Logs a summary of the tests.
# use: DRYWITTEST.logSummary;
function DRYWITTEST.logSummary() {
  local _oldIFS="${IFS}";
  local _test;

  IFS="${DWIFS}";
  for _test in ${TESTS[@]}; do
    IFS="${_oldIFS}";
    DRYWITTEST.logTestSummary "${_test}";
  done
  IFS="${_oldIFS}";
}

# fun: DRYWITTEST.logErrorReasons test
# api: private
# txt: Logs the detailed information about why a given test has thrown errors.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.logErrorReasons "my_test";
function DRYWITTEST.logErrorReasons() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  local _count=${TEST_ERRORS[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;
  local _oldIFS="${IFS}";

  if [ ${_count} -gt 0 ]; then
    IFS=$' \t\n';
    for _i in $(seq 0 1 $((_count-1))); do
      IFS="${_oldIFS}";
      _error="${TEST_ERROR_MESSAGES[${_test}:${_i}]}";
      evalConstant "${_error}" "${_error}";
      _message="${RESULT}";
      logInfo -n "${_message}";
      logInfoResult FAILURE "${_test}";
    done
    IFS="${_oldIFS}";
  fi
}

# fun: DRYWITTEST.logFailureReasons test
# api: private
# txt: Logs the detailed information about why a given test has failed.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.logFailureReasons "my_test";
function DRYWITTEST.logFailureReasons() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  local _count=${TEST_FAILURES[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;
  local _oldIFS="${IFS}";

  if [ ${_count} -gt 0 ]; then
    IFS="${DWIFS}";
    for _i in $(seq 0 1 $((_count-1))); do
      IFS="${_oldIFS}";
      _error="${TEST_FAILURE_MESSAGES[${_test}:${_i}]}";
      evalConstant "${_error}" "${_error}";
      _message="${RESULT}";
      logInfo -n "${_message}";
      logInfoResult FAILURE "${_test}";
    done
    IFS="${_oldIFS}";
  fi
}

# fun: DRYWITTEST.logFailedAssertions test
# api: private
# txt: Logs the failed assertions for given test.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.logFailedAssertions "my_test";
function DRYWITTEST.logFailedAssertions() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  local _count=${TEST_ASSERTION_FAILURES[${_test}]};
  local -i _i=0;
  local _error;
  local _message;
  local _lineNumber;
  local _context;
  local _oldIFS="${IFS}";

  if [ ${_count} -gt 0 ]; then
    IFS="${DWIFS}";
    for _i in $(seq 0 1 $((_count-1))); do
      IFS="${_oldIFS}";
      _lineNumber="${TEST_ASSERTION_LINE_NUMBERS[${_test}:${_i}]}";
      _error="${TEST_ASSERTION_FAILURE_MESSAGES[${_test}:${_i}]}";
      echo "error: ${_error}";
      evalConstant "${_error}" "${_error}";
      _message="${RESULT}";
      _context="${TEST_ASSERTION_FAILURE_CONTEXT[${_test}:${_i}]}";
      if isEmpty "${_context}"; then
        logInfo -n "${_message}";
      else
        logInfo -n "${_message}: ${_context}";
      fi
      logInfoResult FAILURE "${_test}:${_lineNumber}";
    done
    IFS="${_oldIFS}";
  fi
}

# fun: DRYWITTEST.logTestSummary test
# txt: Logs a summary of given test.
# opt: test: The test name.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.logTestSummary "my_test";
function DRYWITTEST.logTestSummary() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  local _errors;
  local _failures;
  local _successes;
  local _assertionFailures;
  local _assertionSuccesses;

  humanReadableTest "${_test}";
  local _testDescription="${RESULT}";

  _errors="${TEST_ERRORS[${_test}]}";
  if isEmpty "${_errors}" || [ ${_errors} -eq 0 ]; then
    _failures="${TEST_FAILURES[${_test}]}";
    _assertionFailures="${TEST_ASSERTION_FAILURES[${_test}]}";
    if isEmpty "${_assertionFailures}" || [ ${_assertionFailures} -eq 0 ]; then
      _assertionSuccesses="${TEST_ASSERTION_SUCCESSES[${_test}]}";
      if isEmpty "${_assertionSuccesses}"; then
        logInfo -n "${_testDescription}: No assertions found";
        logInfoResult FAILURE "0";
      else
        logInfo -n "${_testDescription}: all assertions passed";
        logInfoResult SUCCESS "${_assertionSuccesses}/${_assertionSuccesses}";
      fi
    else
      logInfo -n "${_testDescription}: assertions failed";
      logInfoResult FAILURE "${_assertionFailures}";
      DRYWITTEST.logFailedAssertions "${_test}";
      logInfo -n "${_testDescription}: failures";
      logInfoResult FAILURE "${_failures}";
      DRYWITTEST.logFailureReasons "${_test}";
    fi
  else
    logInfo -n "${_testDescription}: errors";
    logInfoResult FAILURE "${_errors}";
    logInfo "${_testDescription}";
  fi
}

# fun: DRYWITTEST.dwtest
# api: private
# txt: Performns the tests.
# txt: Returns 0/TRUE always.
# use: DRYWITTEST.dwtest
function DRYWITTEST.dwtest() {
  local _tests;
  local _failedTests;
  local _t;
  local _oldIFS="${IFS}";
  local _scriptName;
  local -i _passed=0;
  local -i _failed=0;

  DW.getScriptName;
  local _scriptName="${RESULT#./}";
  logDebug -n "Retrieving tests in ${_scriptName}";
  DRYWITTEST.retrieveTests "${_scriptName}";
  _tests="${RESULT}";
  if isEmpty "${_tests}"; then
    logDebugResult FAILURE "0";
    exitWithErrorCode NO_TESTS_FOUND;
  else
    logDebugResult SUCCESS "$(echo "${_tests}" | wc -w)";
  fi

  IFS=${DWIFS};
  for _t in ${_tests}; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_t}"; then
      humanReadableTest "${_t}";
      logInfo -n " ${RESULT}";
      if runTest "${_t}"; then
        logInfoResult SUCCESS "pass";
        _passed=$((_passed+1));
      else
        logInfoResult FAILURE "failed";
        _failed=$((_failed+1));
      fi
    fi
  done
  IFS="${_oldIFS}";

  DRYWITTEST.retrieveTestsWithIssues;
  _failedTests="${RESULT}";
  if isNotEmpty "${_failedTests}"; then
    IFS="${DWIFS}";
    for _t in ${_failedTests}; do
      IFS="${_oldIFS}";
      DRYWITTEST.logTestSummary "${_t}";
    done
    IFS="${_oldIFS}";
  fi

  echo "export PASSED_TESTS=${_passed};" >> ".$(basename ${_scriptName}).env";
  echo "export FAILED_TESTS=${_failed};" >> ".$(basename ${_scriptName}).env";
}

# fun: __dwCallback
# api: private
# txt: Calling dry-wit from a well-known place
# txt: Returns 0/TRUE always.
# use: __dwCallback;
function __dwCallback() {
  _defineDryWitErrorMessages;
  DWTEST.defineErrors;
  DW.getScriptName;
  local _scriptName="${RESULT}";
  if isFunctionPresent defineErrors "${_scriptName}"; then
    defineErrors;
  else
    export -a ERROR_MESSAGES=();
  fi
}

### ASSERTIONS ###

# fun: Assert.isTrue condition error
# api: public
# txt: Asserts given condition holds true.
# opt: condition: The condition to check.
# opt: error: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.isTrue [ 1 == 1 ] "check [ 1 == 1 ] failed";
function Assert.isTrue() {
  local -i _condition=${1};
  checkNotEmpty condition "${_condition}" 1;
  local _error="${2}";
  checkNotEmpty error "${_error}" 2;

  if isTrue ${_condition}; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_error}";
  fi
}

# fun: Assert.isFalse condition error
# api: public
# txt: Asserts given condition holds true.
# opt: condition: The condition to check.
# opt: error: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.isFalse [ 1 != 1 ], "check [ 1 != 1 ] failed";
function Assert.isFalse() {
  local _condition=${1};
  checkNotEmpty condition "${_condition}" 1;
  local _error="${2}";
  checkNotEmpty error "${_error}" 2;

  if isFalse ${_condition}; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_error}";
  fi
}

# fun: Assert.noErrorThrown message
# api: public
# txt: Asserts no error has been thrown so far in current test.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: [call functionX]; Assert.noErrorThrown "functionX has thrown an error";
function Assert.noErrorThrown() {
  local _message="${1}";
  checkNotEmpty message "${_message}" 1;

  local _errors=${TEST_ERRORS["${FUNCNAME[1]}"]};
  if isEmpty "${_errors}"; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}";
  fi
}

# fun: Assert.errorThrown
# api: public
# txt: Asserts an error has been thrown so far in current test.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: [call functionX]; Assert.errorThrown "functionX should have thrown an error";
function Assert.errorThrown() {
  local _message="${1}";
  checkNotEmpty message "${_message}" 1;

  local _errors=${TEST_ERRORS["${FUNCNAME[1]}"]};
  if isEmpty "${_errors}"; then
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${1}";
  else
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    DRYWITTEST.removeTestError "${FUNCNAME[1]}";
  fi
}

# fun: Assert.areEqual expected actual message
# api: public
# txt: Asserts both values are equal.
# opt: expected: The expected value.
# opt: actual: The actual value.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.areEqual 1 1 "1 does not equal 1";
function Assert.areEqual() {
  local _expected="${1}";
  #  checkNotEmpty expected "${_expected}" 1;
  local _actual="${2}";
  #  checkNotEmpty actual "${_actual}" 2;
  local _message="${3}";
  checkNotEmpty message "${_message}" 3;

  if areEqual "${_expected}" "${_actual}"; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(expected '${_expected}', got '${_actual}')";
  fi
}

# fun: Assert.areNotEqual expected actual message
# api: public
# txt: Asserts both values are different.
# opt: expected: The expected value.
# opt: actual: The actual value.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.areNotEqual 1 2 "1 is equal to 2";
function Assert.areNotEqual() {
  local _expected="${1}";
  checkNotEmpty expected "${_expected}" 1;
  local _actual="${2}";
  checkNotEmpty actual "${_actual}" 2;
  local _message="${3}";
  checkNotEmpty message "${_message}" 3;

  if areNotEqual "${_expected}" "${_actual}"; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "('${_expected}' == '${_actual}')";
  fi
}

# fun: Assert.isEmpty value message
# api: public
# txt: Asserts given value is empty.
# opt: value: The value.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.isEmpty "${testValue}" "testValue is not empty";
function Assert.isEmpty() {
  local _value="${1}";
  local _message="${2}";
  checkNotEmpty message "${_message}" 2;

  if isEmpty "${_value}"; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "('${_value}' is not empty)";
  fi
}

# fun: Assert.isNotEmpty value message
# api: public
# txt: Asserts given value is not empty.
# opt: value: The value.
# opt: message: The error message.
# txt: Returns 0/TRUE if the assert passed; 1/FALSE otherwise.
# use: Assert.isNotEmpty "${testValue}" "testValue is empty";
function Assert.isNotEmpty() {
  local _value="${1}";
  local _message="${2}";

  local -i _rescode=${FALSE};

  if isEmpty "${_message}"; then
    _message="${1}";
  fi
  checkNotEmpty message "${_message}" 2;

  if isEmpty "${_value}"; then
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "(value is empty)";
  else
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: Assert.functionExists functionName message
# api: public
# txt: Asserts given value is an existing function.
# opt: functionName: The function name.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.functionExists "my_function" "my_function does not exist";
function Assert.functionExists() {
  local _functionName="${1}";
  local _message="${2}";
  checkNotEmpty message "${_message}" 2;

  if isNotEmpty "${_functionName}"; then
    if isFunctionPresent "${_functionName}"; then
      DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    else
      DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "('${_functionName}' is not defined)";
    fi
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_message}" "('${_functionName}' is not defined)";
  fi
}

# fun: Assert.fail error
# api: public
# txt: Fails the test directly.
# opt: error: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.fail "my_test shouldn't have passed";
function Assert.fail() {
  local _message="${1}";
  checkNotEmpty error "${_message}" 1;

  DRYWITTEST.addTestFailure "${FUNCNAME[1]}" "${_message}";
}

# fun: Assert.pass
# api: public
# txt: Passes the test directly.
# txt: Returs 0/TRUE always.
# use: Assert.pass;
function Assert.pass() {
  DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
}

# fun: Assert.contains text substring
# api: public
# txt: Checks a substring is contained in given text.
# opt: text: The text.
# opt: substring: The substring.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.contains "sample text" "sample" "'sample text' does not contain 'sample'";
function Assert.contains() {
  local _text="${1}";
  local _substring="${2}";
  local _errorMessage="${3}";

  if Assert.isNotEmpty "${_text}" "Empty text passed to Assert.contains"; then
    checkNotEmpty substring "${_substring}" 2;
    checkNotEmpty errorMessage "${_errorMessage}" 3;

    if contains "${_text}" "${_substring}"; then
      DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    else
      DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' does not contain '${_substring}')";
    fi
  else
    if isEmpty "${_errorMessage}"; then
      _errorMessage="${2}";
    fi
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' is empty)";
  fi
}

# fun: Assert.doesNotContain text substring
# api: public
# txt: Checks whether a text does not contain given substring.
# opt: text: The text.
# opt: substring: The substring.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.doesNotContain "sample text" "sample" "'sample text' does not contain 'sample'";
function Assert.doesNotContain() {
  local _text="${1}";
  local _substring="${2}";
  local _errorMessage="${3}";

  if Assert.isNotEmpty "${_text}" "Empty text passed to Assert.doesNotContain"; then
    checkNotEmpty text "${_text}" 1;
    checkNotEmpty substring "${_substring}" 2;
    checkNotEmpty errorMessage "${_errorMessage}" 3;

    if contains "${_text}" "${_substring}"; then
      DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' contains '${_substring}')";
    else
      DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    fi
  else
    if isEmpty "${_errorMessage}"; then
      _errorMessage="${2}";
    fi
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' is empty)";
  fi
}

# fun: Assert.fileContains file text
# api: public
# txt: Checks a file contains a text.
# opt: file: The file.
# opt: text: The text to test.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.fileContains "/tmp/debug.log" "TESTING" "/tmp/debug.log doesn't contain TESTING";
function Assert.fileContains() {
  local _file="${1}";
  local _text="${2}";
  local _errorMessage="${3}";

  if Assert.isNotEmpty "${_file}" "Empty file provided to Assert.fileContains"; then
    checkNotEmpty text "${_text}" 2;
    checkNotEmpty errorMessage "${_errorMessage}" 3;

    if grep -q "${_text}" "${_file}" 2> /dev/null; then
      DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    else
      DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' does not contain '${_actual}')";
    fi
  else
    if isEmpty "${_errorMessage}"; then
      _errorMessage="${2}";
    fi
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_file}' is empty)";
  fi
}

# fun: Assert.fileDoesNotContain file text
# api: public
# txt: Checks a file doesn't contain a text.
# opt: file: The file.
# opt: text: The text to test.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: Assert.fileDoesNotContain "/tmp/debug.log" "TESTING" "/tmp/debug.log contains TESTING";
function Assert.fileDoesNotContain() {
  local _file="${1}";
  local _text="${2}";
  local _errorMessage="${3}";

  if Assert.isNotEmpty "${_file}"; then
    checkNotEmpty file "${_file}" 1;
    checkNotEmpty text "${_text}" 2;
    checkNotEmpty errorMessage "${_errorMessage}" 3;

    if grep -q "${_text}" "${_file}" 2> /dev/null; then
      DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_text}' does not contain '${_actual}')";
    else
      DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
    fi
  else
    if isEmpty "${_errorMessage}"; then
      _errorMessage="${2}";
    fi
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_file}' is empty)";
  fi
}

# fun: Assert.arrayContains text array
# api: public
# txt: Checks an array contains a text.
# opt: text: The text to test.
# opt: array: The array.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: local arrayContents="${array[@]}"; Assert.arrayContains "TESTING" "${arrayContents}" "array doesn't contain TESTING";
function Assert.arrayContains() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  shift;
  local _array="${1}";
  checkNotEmpty array "${_array}" 2;
  shift;
  local _errorMessage="${@}";
  checkNotEmpty errorMessage "${_errorMessage}" 3;

  if arrayContains "${_text}" "${_array}"; then
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  else
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_array}' does not contain '${_text}')";
  fi
}

# fun: Assert.arrayDoesNotContain text array
# api: public
# txt: Checks an array doesn't contain a text.
# opt: text: The text to test.
# opt: array: The array.
# opt: errorMessage: The error message.
# txt: Returns 0/TRUE always.
# use: local arrayContents="${array[@]}"; Assert.arrayDoesNotContain "TESTING" "${arrayContents}" "array contains TESTING";
function Assert.arrayDoesNotContain() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  shift;
  local _array="${1}";
  checkNotEmpty array "${_array}" 2;
  shift;
  local _errorMessage="${@}";
  checkNotEmpty errorMessage "${_errorMessage}" 3;

  if arrayContains "${_text}" "${_array}"; then
    DRYWITTEST.addTestAssertionFailure "${FUNCNAME[1]}" "${_errorMessage}" "('${_array}' contains '${_text}')";
  else
    DRYWITTEST.addTestAssertionSuccess "${FUNCNAME[1]}";
  fi
}

# fun: DRYWITTEST.sourceSUT
# api: private
# txt: Sources the Subject-under-test, if found, using a convention.
# txt: If the tests are in foo-tests.sh, it'll try to source ./foo.sh first.
# txt: If it doesn't exist, then it'll try to source ../src/foo.sh.
# txt: Returns 0/TRUE if the Subject-under-test is found; 1/FALSE otherwise.
# use: DRYWITTEST.sourceSUT;
function DRYWITTEST.sourceSUT() {
  local -i _rescode=${FALSE};
  local _sutFilename;
  local _sutFilePath;
  DW.getScriptName;
  local _scriptName="${RESULT}";
  local _bootstrapException=${FALSE};

  if endsWith "${_scriptName}" "bootstrap-tests.sh"; then
    _bootstrapException=${TRUE};
    _rescode=${TRUE};
  fi

  if isFalse ${_rescode}; then
    if removeSuffix "${_scriptName}" "-tests.sh"; then
      _sutFilename="${RESULT}.sh";
    elif removeSuffix "${_scriptName}" "-test.sh"; then
      _sutFilename="${RESULT}.sh";
    else
      _sutFilename="${_scriptName}";
    fi

    if removeSuffix "${_sutFilename}" ".sh"; then
      _sutFilename="${RESULT}.dw";
    fi

    local _oldIFS="${IFS}";
    IFS="${DWIFS}";
    local _folder;
    for _folder in "${BASH_SOURCE[0]}" "$(dirname $0)" "."; do
      IFS="${_oldIFS}";
      if fileExists "${_folder}/${_sutFilename}"; then
        _sutFilePath="${_folder}/${_sutFilename}";
        _rescode=${TRUE};
        break;
      elif fileExists "${_folder}/../src/${_sutFilename}"; then
        _sutFilePath="${_folder}/../src/${_sutFilename}";
        _rescode=${TRUE};
        break;
      elif fileExists "${_folder}/../src/modules/${_sutFilename}"; then
        _sutFilePath="${_folder}/../src/modules/${_sutFilename}";
        _rescode=${TRUE};
        break;
      elif fileExists "${_folder}/../../src/modules/ext/${_sutFilename}"; then
        _sutFilePath="${_folder}/../../src/modules/ext/${_sutFilename}";
        _rescode=${TRUE};
        break;
      fi
    done
    IFS="${_oldIFS}";

    if isFalse ${_rescode}; then
      logInfo -n "Retrieving the SUT (subject under test) ${_sutFilename}";
      logInfoResult NEUTRAL "missing";
    fi

    if isTrue ${_rescode}; then
      source "${_sutFilePath}";
    fi
  fi

  return ${_rescode};
}

# fun: humanReadableTest test
# api: private
# txt: Extracts a human-readable description from given test name.
# opt: test: The test.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the test description.
# use: humanReadableTest "function_a_works_as_expected_test"; echo "${RESULT}"; # 'function a works as expected'
function humanReadableTest() {
  local _test="${1}";
  checkNotEmpty test "${_test}" 1;

  if removeSuffix "${_test}" "_test"; then
    if replaceAll "${RESULT}" "_" " "; then
      uncapitalize "${RESULT}";
    fi
  fi

  return ${TRUE};
}
# fun: main
# api: private
# txt: Runs dry-wit-test.
# txt: Returns 0/TRUE always.
# use: main
function main() {
  DRYWITTEST.sourceSUT;
  DRYWITTEST.dwtest;
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
