# mod: process
# api: public
# txt: Functions dealing with external processes.

# fun: isRunning filePath
# api: public
# txt: Checks if a process is running.
# opt: filePath: The path of the executable.
# txt: Returns 0/${TRUE} if the process is running; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the pid of the process.
# use: if isRunning /bin/bash; then
# use:   echo "bash pid: ${RESULT}";
# use: fi
function isRunning() {
  local _filePath="${1}"
  checkNotEmpty filePath "${_filePath}" 1

  local -i _rescode=${FALSE}
  local _result
  local _fileName="$(basename "${_filePath}")"

  if firstPidMatching "${_fileName}"; then
    _result="${RESULT}"
    _rescode=${TRUE}
  fi

  if isEmpty "${_result}"; then
    _rescode=${FALSE}
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: halt seconds?
# api: public
# txt: Halts the process (keeps it paused forever).
# opt: seconds: The amount of seconds to sleep, periodically. Optional.
# txt: Doesn't return.
# use: halt;
function halt() {
  local _seconds="${1:-100}"

  while isTrue ${TRUE}; do
    sleep ${_seconds}
  done
}

# fun: pidsMatching processName
# api: public
# txt: Retrieves the ids of the process matching given name.
# opt: processName: The name of the process.
# txt: Returns 0/TRUE if any process matches; 1/FALSE otherwise.
# use: if pidsMatching "my-script.sh"; then
# use:   echo "my-script.sh : ${RESULT}";
# use: fi
function pidsMatching() {
  local _processName="${1}"
  checkNotEmpty processName "${_processName}" 1

  local -i _rescode=${FALSE}
  local _result
  local _aux
  local _ownPid

  if isMacOSX; then
    _result="$(command ps -ax 2>/dev/null | command grep -v grep | command grep "${_processName}" 2>/dev/null | command cut -d' ' -f 1)"
    _rescode=$?
  else
    _aux="$(command pidof "${_processName}" 2>/dev/null)"
    _rescode=$?
    if isFalse ${_rescode}; then
      _aux="$(command ps -ef 2>/dev/null | command grep -v grep | command grep "${_processName}" 2>/dev/null)"
      _rescode=$?
    fi
    if isTrue ${_rescode}; then
      _processPid="$(command echo "${_aux}" | command head -n 1 | command cut -d' ' -f 1)"
      _aux="$(command echo "${_aux}" | command tail -n +2 | command cut -d' ' -f 1)"
      local _pid
      local _oldIFS="${IFS}"
      IFS="${DWIFS}"
      for _pid in ${_aux}; do
        IFS="${_oldIFS}"
        _result="${_pid}"
        if ! isChildProcess "${_pid}" "${_processPid}"; then
          _rescode=${FALSE}
          _result=""
          break
        fi
      done
      IFS="${_oldIFS}"
    fi
  fi

  if isEmpty "${_result}"; then
    _rescode=${FALSE}
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: firstPidMatching processName
# api: public
# txt: Retrieves the id of the first process matching given name.
# opt: processName: The name of the process.
# txt: Returns 0/TRUE if the process is found; 1/FALSE otherwise.
# use: if firstPidMatching "my-script.sh"; then
# use:   echo "my-script.sh : ${RESULT}";
# use: fi
function firstPidMatching() {
  local _processName="${1}"
  checkNotEmpty processName "${_processName}" 1

  local -i _rescode=${FALSE}
  local _result
  local _pids

  if pidsMatching "${_processName}"; then
    _pids="${RESULT}"
  fi

  local _oldIFS="${IFS}"
  IFS="${DWIFS}"
  for _pid in ${_pids}; do
    IFS="${_oldIFS}"
    _result="${_pid}"
    if isNotEmpty "${_result}"; then
      _rescode=${TRUE}
      break
    fi
  done
  IFS="${_oldIFS}"

  if isEmpty "${_result}"; then
    _rescode=${FALSE}
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: anotherProcessAlreadyRunning
# api: public
# txt: Checks if this script is already running.
# txt: Returns 0/TRUE in such case; 1/FALSE otherwise.
# use: if anotherProcessAlreadyRunning; then
# use:   echo "Another process already running";
# use: fi
function anotherProcessAlreadyRunning() {
  local -i _rescode=${FALSE}
  local _ownPid=$$
  local _pid

  DW.getScriptPath
  local _scriptPath="${RESULT}"

  local _pids=""

  if pidsMatching "${_scriptPath}"; then
    _pids="${RESULT}"
    echo "script: ${_scriptPath}, pids -> ${_pids}"
  fi

  if isNotEmpty "${_pids}"; then
    local _oldIFS="${IFS}"
    IFS="${DWIFS}"
    for _pid in ${_pids}; do
      IFS="${_oldIFS}"
      if ! areEqual "${_pid}" "${_ownPid}"; then
        _rescode=${TRUE}
        break
      fi
    done
    IFS="${_oldIFS}"
  fi

  return ${_rescode}
}

# fun: isChildProcess childPid parentPid
# api: public
# txt: Checks whether a process is child of another one.
# txt: Returns 0/TRUE in such case; 1/FALSE otherwise.
# use: if isChildProcess ${childPid} ${parentPid}; then
# use:   echo "${parentPid} is parent of ${childPid}";
# use: fi
function isChildProcess() {
  local _childPid="${1}"
  checkNotEmpty childPid "${_childPid}" 1
  local _parentPid="${2}"
  checkNotEmpty parentPid "${_parentPid}" 2
  local -i _rescode=${FALSE}

  local _children="$(command pgrep -P "${_parentPid}")"
  if isNotEmpty "${_children}"; then
    local _oldIFS="${IFS}"
    IFS="${DWIFS}"
    local _pid
    for _pid in ${_children}; do
      IFS="${_oldIFS}"
      if ! areEqual "${_pid}" "${_parentPid}"; then
        _rescode=${TRUE}
        break
      fi
    done
    IFS="${_oldIFS}"
  fi

  return ${_rescode}
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
