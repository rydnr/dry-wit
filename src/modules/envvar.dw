# mod: envvar
# api: public
# txt: Functions to define and evaluate environment variables.
# txt: Using work from: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference

# Bash: Passing variables by reference
# Copyright (C) 2010 Freddy Vulto
# Version: upvars-0.9.dev
# See: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# fun: ENVVAR.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: ENVVAR.getModuleName; echo "Module: ${RESULT}";
function ENVVAR.getModuleName() {
  export RESULT="ENVVAR";
  return ${TRUE};
}

# fun: defineButDoNotOverrideEnvVar varName description defaultValue? command?
# api: public
# txt: Defines an environment variable, if it's not already defined.
# opt: varName: The variable name.
# opt: description: The variable description.
# opt: defaultValue: The default value. Optional.
# opt: command: An optional command to provide the variable value at runtime.
# txt: Returns 0/TRUE if the variable is defined; 1/FALSE otherwise.
# use: if defineButDoNotOverrideEnvVar "MY_VAR" "MY_VAR is used for this and that" "dummy"; then
# use:   echo "MY_VAR defined";
# use: else
# use:   echo "MY_VAR already defined. Not overridden"
# use: fi
function defineButDoNotOverrideEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varDescription="${2}";
  checkNotEmpty description "${_varDescription}" 2;
  local _varDefault="${3}";
  local _varCommand="${4}";

  local -i _rescode;

  if isEnvVarDefined ${_varName}; then
    logTrace -n "Skipping already-defined ${_varName}";
    logTraceResult SUCCESS "skipped";
    _rescode=${TRUE};
  else
    local _mandatoryOrOptional;
    if isEnvVarMandatory "${_varName}"; then
      _mandatoryOrOptional=MANDATORY;
    else
      _mandatoryOrOptional=OPTIONAL;
    fi
    defineEnvVar "${_varName}" "${_mandatoryOrOptional}" "${_varDescription}" "${_varDefault}" "${_varCommand}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: defineEnvVar varName MANDATORY|OPTIONAL description defaultValue? command?
# api: public
# txt: Declares a new environment variable.
# opt: varName: The variable name.
# opt: MANDATORY|OPTIONAL: Whether is the variable is mandatory or not.
# opt: description: The variable description.
# opt: defaultValue: The default value (optional).
# opt: command: The command to retrieve the actual value (optional).
# txt: Returns 0/TRUE if a new variable gets defined; 1/FALSE if the variable already existed.
# use: if defineEnvVar "MY_VAR" MANDATORY "My env var" "foo" "date"; then
# use:   echo "MY_VAR created";
# use: fi
function defineEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varMandatory="${2}";
  ENVVAR.checkMandatoryOrOptional "${_varMandatory}" 2;
  local _varDescription="${3}";
  checkNotEmpty description "${_varDescription}" 3;
  local _varDefault="${4}";
  local _varCommand="${5:-}";

  local -i _rescode=${TRUE};

  if isEnvVarDefined "${_varName}"; then
    _rescode=${FALSE};
    if isNotEmpty "${_varDefault}"; then
      evalVar "${_varName}";
      local _varValue="${RESULT}";
      if isEmpty "${_varValue}"; then
        _rescode=${TRUE};
      fi
    fi
  fi

  if isTrue ${_rescode}; then

    ENVVAR.defineEnvVar "${_varName}" "${_varMandatory}" "${_varDescription}" "${_varDefault}" "${_varCommand}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: ENVVAR.defineEnvVar varName MANDATORY|OPTIONAL description defaultValue? command?
# api: private
# txt: Declares a new environment variable.
# opt: varName: The variable name.
# opt: MANDATORY|OPTIONAL: Whether is the variable is mandatory or not.
# opt: description: The variable description.
# opt: defaultValue: The default value (optional).
# opt: command: The command to retrieve the actual value (optional).
# txt: Returns 0/TRUE if a new variable gets defined; 1/FALSE if the variable already existed.
# use: if ENVVAR.defineEnvVar "MY_VAR" MANDATORY "My env var" "foo" "date"; then
# use:   echo "MY_VAR created";
# use: fi
function ENVVAR.defineEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varMandatory="${2}";
  ENVVAR.checkMandatoryOrOptional "${_varMandatory}" 2;
  local _varDescription="${3}";
  checkNotEmpty description "${_varDescription}" 3;
  local _varDefault="${4}";
  local _varCommand="${5:-}";

  local -i _rescode;

  ENVVAR.addEnvVarMandatory "${_varName}" "${_varMandatory}";

  local _description="";
  if ENVVAR.evalVarDescription "${_varName}"; then
    _description="${RESULT}";
  fi

  if isEmpty "${_description}"; then
    ENVVAR.addEnvVarDescription "${_varName}" "${_varDescription}";
  fi

  evalVar "${_varName}";
  local _varValue="${RESULT}";

  if isEmpty "${_varValue}"; then
    local _defaultValue="${_varDefault}";

    if isNotEmpty "${_varCommand}"; then
      ENVVAR.addEnvVarCommand "${_varName}" "${_varCommand}";
      if ENVVAR.evalVarCommand "${_varName}"; then
        _defaultValue="${RESULT}";
      fi
    fi

    if isNotEmpty "${_defaultValue}"; then
      ENVVAR.addEnvVarDefault "${_varName}" "${_defaultValue}";
      if ENVVAR.evalVarDefault "${_varName}"; then
        defaultValue="${RESULT}";
      fi
      _varValue="${_defaultValue}";
    fi
  else
    ENVVAR.addEnvVarReadonly "${_varName}";
  fi

  ENVVAR.addEnvVar "${_varName}" "${_varValue}";
  _rescode=$?;

  return ${_rescode};
}

# fun: evalEnvVars
# api: public
# txt: Resolves the value of all custom environment variables.
# txt: Returns 0/TRUE always.
# use: evalEnvVars;
function evalEnvVars() {

  ENVVAR.getEnvironmentVariablesVariableName;
  local -n _envVariables=${RESULT};

  local _oldIFS="${IFS}";
  local _var;
  IFS="${DWIFS}";
  for _var in ${_envVariables[@]}; do
    IFS="${_oldIFS}";
    evalEnvVar "${_var}";
  done
  IFS="${_oldIFS}";
}

# fun: evalVar varName
# api: public
# txt: Retrieves the value of given variable.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the value could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the variable value.
# use: if evalVar "MY_VAR"; then
# use:   echo "MY_VAR -> ${RESULT}";
# use: fi
function evalVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  local _result
  _result="$(set noglob; export DOLLAR='$'; export DQUOTE="\""; echo "echo ${DQUOTE}${DOLLAR}{$(echo "${_varName}")}${DQUOTE}" | sh 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="set noglob; export DOLLAR='$'; export DQUOTE=\"\\\"\"; echo \"echo ${DQUOTE}${DOLLAR}{$(echo "${_varName}")}${DQUOTE}\" | sh;\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: isEnvVarDefined varName
# api: public
# txt: Checks whether giver variable is defined.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the variable is defined; 1/FALSE otherwise.
# use: if isEnvVarDefined "MY_VAR"; then
# use:   echo "MY_VAR is defined already";
# use: fi
function isEnvVarDefined() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  ENVVAR.getEnvironmentVariablesVariableName;
  local -n _envVars=${RESULT};

  if isEmpty "${_envVars[@]}"; then
    _rescode=${FALSE};
  else
    arrayContains "${_varName}" "${_envVars[@]}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: isEnvVarMandatory varName
# api: public
# txt: Checks whether given environment variable is mandatory.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the variable is mandatory; 1/FALSE otherwise.
# use: if isEnvVarMandatory "MY_VAR"; then
# use:   echo "MY_VAR is mandatory";
# use: fi
function isEnvVarMandatory() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  local _varMandatory;

  ENVVAR.getMandatoryEnvironmentVariablesVariableName;
  local -n _mandatoryEnvironmentVariables=${RESULT};
  if arrayContains "${_varName}" "${!_mandatoryEnvironmentVariables[@]}"; then
    _varMandatory="${_mandatoryEnvironmentVariables[${_varName}]}";
  fi

  if areEqual "${MANDATORY}" "${_varMandatory}" || areEqual "${_varMandatory}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: isEnvVarOptional varName
# api: public
# txt: Checks whether given environment variable is optional.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the variable is optional; 1/FALSE otherwise.
# use: if isEnvVarMandatory "MY_VAR"; then
# use:   echo "MY_VAR is optional";
# use: fi
function isEnvVarOptional() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  local _varMandatory;

  ENVVAR.getMandatoryEnvironmentVariablesVariableName;
  local -n _mandatoryEnvironmentVariables=${RESULT};
  if arrayContains "${_varName}" "${!_mandatoryEnvironmentVariables[@]}"; then
    _varMandatory="${_mandatoryEnvironmentVariables[${_varName}]}";
  fi

  if areEqual ${OPTIONAL} ${_varMandatory} || areEqual "${_varMandatory}" "OPTIONAL"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: ENVVAR.isEnvVarReadonly varName
# api: private
# txt: Checks whether given variable is read-only or not.
# opt: varName: The name of the variable.
# txt: Returns 0/TRUE if the variable can be modified; 1/FALSE otherwise.
# use: if ENVVAR.isEnvVarReadonly MY_VARIABLE; then
# use:   echo "MY_VARIABLE cannot be overriden via overrideEnvVar";
# use: fi
function ENVVAR.isEnvVarReadonly() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  ENVVAR.getReadonlyEnvironmentVariablesVariableName;
  local -n _readonlyEnvironmentVariables=${RESULT};

  local _varReadonly;

  if arrayContains "${_varName}" "${!_readonlyEnvironmentVariables[@]}"; then
    _varReadonly="${_readonlyEnvironmentVariables[${_varName}]}";
  fi

  if isNotEmpty "${_varReadonly}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: ENVVAR.addEnvVarReadonly varName
# api: private
# txt: Annotates given variable cannot be modified.
# opt: varName: The name of the variable.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addEnvVarReadonly MY_VARIABLE;
function ENVVAR.addEnvVarReadonly() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  ENVVAR.getReadonlyEnvironmentVariablesVariableName;
  local -n _readonlyEnvironmentVariables=${RESULT};
  _readonlyEnvironmentVariables[${_varName}]=${TRUE};
}

# fun: overrideEnvVar varName varValue? description?
# api: public
# txt: Overrides the value of an environment variable.
# opt: varName: The variable name.
# opt: varValue: The variable value.
# opt: description: The variable description. Optional.
# txt: Returns 0/TRUE always.
# use: overrideEnvVar MY_VAR "new-value";
function overrideEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varValue="${2}";
  local _varDescription="${3:-not provided}";

  local -i _rescode=${FALSE};

  if  isEnvVarDefined "${_varName}"; then
    if ENVVAR.isEnvVarReadonly "${_varName}"; then
      logInfo "Warning: Rejecting attempt to override value of environment variable ${_varName}";
    else
      declare -gx "${_varName}"="${_varValue}";
      ENVVAR.addOverriddenEnvVar "${_varName}" "${_varValue}";
      _rescode=$?;
    fi
  else
    logInfo "Warning: Rejecting attempt to override unknown variable ${_varName}";
  fi

  return ${_rescode};
}

# fun: printEnvironment
# api: public
# txt: Prints the environment variables.
# txt: Returns 0/TRUE always.
# use:  printEnvironment;
function printEnvironment() {

  if isTraceEnabled; then
    ENVVAR.getEnvironmentVariablesVariableName;
    local -n _envVariables=${RESULT};

    if isNotEmpty "${_envVariables[@]}"; then
      cat <<EOF
Environment variables:
EOF
      local _tempFile="";
      if createTempFileNoCleanup; then
        _tempFile="${RESULT}";
      fi

      local _oldIFS="${IFS}";
      IFS="${DWIFS}";
      local -i _i;
      for ((_i = 0; _i < ${#_envVariables[@]}; _i++)); do
        IFS="${_oldIFS}";
        local _varName="${_envVariables[${_i}]}";
        local _varValue;
        if ENVVAR.evalOverriddenVar "${_varName}"; then
          _varValue="${RESULT}";
        else
          evalVar "${_varName}";
          _varValue="${RESULT}";
        fi

        local _description;
        if ENVVAR.evalVarDescription "${_varName}"; then
          _description=": ${RESULT}.";
        else
          _description="";
        fi

        if isEmpty "${_tempFile}"; then
          echo "  ${_varName} (${_varValue})${_description}";
        else
          echo "  ${_varName} (${_varValue})${_description}" >> "${_tempFile}";
        fi
      done
      IFS="${_oldIFS}";

      if isNotEmpty "${_tempFile}"; then
        cat "${_tempFile}" | sort;
        rm -f "${_tempFile}" > /dev/null 2>&1;
      fi
    fi
  fi
}

# fun: retrieveCustomEnvironmentVariables
# api: public
# txt: Retrieves the custom environment variables.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the environment variables.
# use: retrieveCustomEnvironmentVariables;
# use: echo "Custom environment variables: ${RESULT}";
function retrieveCustomEnvironmentVariables() {
  ENVVAR.getEnvironmentVariablesVariableName;
  local -n _envVariables="${RESULT}";
  export RESULT="${_envVariables[@]}";
}

# fun: upvar varName value+
# api: public
# txt: Assigns a variable one scope above the caller.
# opt: varName: The variable name to assign value to.
# opt: value: The value(s) to assign. If multiple values, an array is assigned, otherwise a single value is assigned.
# txt: Returns 0/TRUE always.
# txt: NOTE: For assigning multiple variables, use 'upvars'.  Do NOT use multiple 'upvar' calls, since one 'upvar' call might reassign a variable to be used by another 'upvar' call.
# use: f() { local b; g b; echo $b; }
# use: g() { local "$1" && upvar $1 bar; }
# use: f  # Ok: b=bar
function upvar() {
  checkNotEmpty varName "${1}" 1;
  if unset -v "$1"; then           # Unset & validate varname
    if (( $# == 2 )); then
      eval $1=\"\$2\"          # Return single value
    else
      eval $1=\(\"\${@:2}\"\)  # Return array
    fi
  fi
}

# fun: upvars [-v varName value] | [-aN varName value+]
# api: public
# txt: Assign variables one scope above the caller
# txt: Usage: local varname [varname ...] && upvars [-v varname value] | [-aN varname [value ...]] ...
# opt:  -v: Assign single value to varname.
# opt: varName: The name of the variable.
# opt: -aN: Assign next N values to varname as array.
# opt: value: The value(s) to assign.
# txt: Returns 0/TRUE if the variables are assigned; 1/FALSE otherwise.
# use: f() { local a b; g a b; declare -p a b; }
# use: g() {
# use:   local c=( foo bar )
# use:   local "$1" "$2" && upvars -v $1 A -a${#c[@]} $2 "${c[@]}"
# use: }
# use: f  # Ok: a=A, b=(foo bar)
function upvars() {
  local _flag="${1}";

  while (( $# )); do
    case $1 in
      -a*)
        # Error checking
        [[ ${1#-a} ]] || { echo "bash: ${FUNCNAME[0]}: \`$1': missing"\
                                "number specifier" 1>&2; return 1; }
        printf %d "${1#-a}" &> /dev/null || { echo "bash:"\
                                                   "${FUNCNAME[0]}: \`$1': invalid number specifier" 1>&2
                                              return 1; }
        # Assign array of -aN elements
        [[ "$2" ]] && unset -v "$2" && eval $2=\(\"\${@:3:${1#-a}}\"\) && \
          shift $((${1#-a} + 2)) || { exitWithErrorCode UNACCEPTABLE_API_CALL "\`$1${2+ }$2': missing argument(s) to ${FUNCNAME[0]}. Review ${FUNCNAME[1]}"; }
        ;;
      -v)
        # Assign single value
        [[ "$2" ]] && unset -v "$2" && eval $2=\"\$3\" && \
          shift 3 || { exitWithErrorCode UNACCEPTABLE_API_CALL "$1: missing argument(s) to ${FUNCNAME[0]}. Review ${FUNCNAME[1]}"; }
        ;;
      --help) echo "\
Usage: local varName [varName ...] &&
   ${FUNCNAME[0]} [-v varName value] | [-aN varName [value ...]] ...
Available OPTIONS:
-aN VARNAME [value ...]   assign next N values to varname as array
-v VARNAME value          assign single value to varname
--help                    display this help and exit
--version                 output version information and exit"
              return 0 ;;
      --version) echo "\
${FUNCNAME[0]}-0.9.dev
Copyright (C) 2010 Freddy Vulto
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."
                 return 0 ;;
      *)
        exitWithErrorCode UNACCEPTABLE_API_CALL "$1: invalid option to ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
    esac
  done
}

# fun: ENVVAR.getEnvironmentVariablesVariableName
# api: private
# txt: Retrieves the name of the variable containing the environment variables.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing the environment variables.
# use: ENVVAR.getEnvironmentVariablesVariableName; local -n _envVariables=${RESULT};
function ENVVAR.getEnvironmentVariablesVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" ENVIRONMENT_VARIABLES;
}

# fun: ENVVAR.addEnvVar varName varValue?
# api: private
# txt: Annotates given environment variable.
# opt: varName: The variable name.
# opt: varValue: The value. Optional.
# txt: Returns 0/TRUE if the environment variable is annotated; 1/FALSE otherwise.
# use: if ENVVAR.addEnvVar FOO "bar"; then
# use:   echo "FOO variable added";
# use: fi
function ENVVAR.addEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varValue="${2:-}";
  local -i _rescode=${FALSE};

  declare -gx "${_varName}"="${_varValue}";
  _rescode=$?;
  if isTrue ${_rescode}; then
    ENVVAR.appendEnvironmentVariable "${_varName}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.getEnvironmentVariablesCommandsVariableName
# api: private
# txt: Retrieves the name of the variable containing the commands associated to the environment variables.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing the commands associated to the environment variables.
# use: ENVVAR.getEnvironmentVariablesCommandsVariableName; local -n _commands=${RESULT};
function ENVVAR.getEnvironmentVariablesCommandsVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" ENVIRONMENT_VARIABLES_COMMANDS;
}

# fun: ENVVAR.addEnvVarCommand varName command
# api: private
# txt: Annotates the command of given environment variable.
# opt: varName: The variable name.
# opt: command: The command.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addEnvVarCommand "MY_VAR" "curl http://zeroconf.example.com/version | bash";
function ENVVAR.addEnvVarCommand() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varCommand="${2}";
  checkNotEmpty command "${_varCommand}" 2;

  ENVVAR.getEnvironmentVariablesCommandsVariableName;
  local -n _environmentVariablesCommands="${RESULT}";

  _environmentVariablesCommands[${_varName}]="${_varCommand}";
}

# fun: ENVVAR.getEnvironmentVariablesDefaultsVariableName
# api: private
# txt: Retrieves the name of the variable containing the default values of the environment variables.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing the default values of the environment variables.
# use: ENVVAR.getEnvironmentVariablesDefaultsVariableName; local -n _defaultValues=${RESULT};
function ENVVAR.getEnvironmentVariablesDefaultsVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" ENVIRONMENT_VARIABLES_DEFAULTS;
}

# fun: ENVVAR.addEnvVarDefault varName defaultValue
# api: private
# txt: Annotates the default value of given environment variable.
# opt: varName: The variable name.
# opt: defaultValue: The default value.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addEnvVarDefault "MY_VAR" "MY_VAR's default value";
function ENVVAR.addEnvVarDefault() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varDefault="${2}";
  checkNotEmpty defaultValue "${_varDefault}" 1;

  ENVVAR.getEnvironmentVariablesDefaultsVariableName;
  local -n _environmentVariablesDefaults="${RESULT}";

  _environmentVariablesDefaults["${_varName}"]="${_varDefault}";
}

# fun: ENVVAR.diagnoseBug text file
# api: private
# txt: Provides diagnostic information in the envvar bug.
# opt: text: The header text.
# opt: file: The file with diagnostic information.
# txt: Returns 0/TRUE always.
# use: ENVVAR.diagnoseBug "my text" "${tempFile}";
function ENVVAR.diagnoseBug() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _file="${2}";
  checkNotEmpty file "${_file}" 2;

  local _output="/tmp/envvar-bug.log";

  echo "$(date): ${_text}" >> ${_output};
  env >> ${_output};
  cat "${_file}" >> ${_output};
  printApiCall >> ${_output};
  echo "" >> ${_output};
}

# fun: ENVVAR.getEnvironmentVariablesDescriptionsVariableName
# api: private
# txt: Retrieves the name of the variable containing the descriptions of the environment variables.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing the descriptions of the environment variables.
# use: ENVVAR.getEnvironmentVariablesDescriptinosVariableName; local -n _descriptions=${RESULT};
function ENVVAR.getEnvironmentVariablesDescriptionsVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" ENVIRONMENT_VARIABLES_DESCRIPTIONS;
}

# fun: ENVVAR.addEnvVarDescription varName description
# api: private
# txt: Annotates the description of given environment variable.
# opt: varName: The variable name.
# opt: description: The description.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addEnvVarDescription "MY_VAR" "MY_VAR description";
function ENVVAR.addEnvVarDescription() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varDescription="${2}";
  checkNotEmpty description "${_varDescription}" 2;

  ENVVAR.getEnvironmentVariablesDescriptionsVariableName;
  local -n _environmentVariablesDescriptions="${RESULT}";

  _environmentVariablesDescriptions["${_varName}"]="${_varDescription}";
}

# fun: ENVVAR.getMandatoryEnvironmentVariablesVariableName
# api: private
# txt: Retrieves the name of the variable containing whether each environment variable is mandatory.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing whether each environment variables is mandatory.
# use: ENVVAR.getMandatoryEnvironmentVariablesVariableName; local -n _mandatoryInfo=${RESULT};
function ENVVAR.getMandatoryEnvironmentVariablesVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" MANDATORY_ENVIRONMENT_VARIABLES;
}

# fun: ENVVAR.addEnvVarMandatory varName MANDATORY|OPTIONAL
# api: private
# txt: Annotates whether given environment variable is mandatory or optional.
# opt: varName: The variable name.
# opt: MANDATORY|OPTIONAL: Whether the variable is mandatory or optional.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addEnvVarMandatory "MY_VAR" OPTIONAL;
function ENVVAR.addEnvVarMandatory() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varMandatory="${2}";
  ENVVAR.checkMandatoryOrOptional "${_varMandatory}" 2;

  ENVVAR.getMandatoryEnvironmentVariablesVariableName;
  local -n _mandatoryEnvironmentVariables="${RESULT}";

  _mandatoryEnvironmentVariables["${_varName}"]="${_varMandatory}";
}

# fun: ENVVAR.getReadonlyEnvironmentVariablesVariableName
# api: private
# txt: Retrieves the name of the variable containing whether each environment variable is read-only.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing whether each environment variables is read-only.
# use: ENVVAR.getReadonlyEnvironmentVariablesVariableName;
# use: local -n _readonlyInfo=${RESULT};
function ENVVAR.getReadonlyEnvironmentVariablesVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" READONLY_ENVIRONMENT_VARIABLES;
}

# fun: ENVVAR.getOverriddenEnvironmentVariablesVariableName
# api: private
# txt: Retrieves the name of the variable containing the overridden environment variables.
# txt: Returns 0/TRUE always.
# txt: The RESULT variable contains the name of the variable containing the overridden environment variables.
# use: ENVVAR.getOverriddenEnvironmentVariablesVariableName; local -n _overridenEnvVars=${RESULT};
function ENVVAR.getOverriddenEnvironmentVariablesVariableName() {
  ENVVAR.getModuleName;
  DW.getGlobalVariableName "${RESULT}" OVERRIDDEN_ENVIRONMENT_VARIABLES;
}

# fun: ENVVAR.addOverridenEnvVar varName value?
# api: private
# txt: Annotates given environment variable as overridden.
# opt: varName: The variable name.
# opt: value: The value. Optional.
# txt: Returns 0/TRUE always.
# use: ENVVAR.addOverriddenEnvvar "MY_VAR" "MY_VAR's new value";
function ENVVAR.addOverriddenEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local _varValue="${2:-}";

  if isEnvVarDefined "${_varName}"; then
    ENVVAR.getOverriddenEnvironmentVariablesVariableName;
    local -n _overriddenEnvVariables="${RESULT}";
    _overriddenEnvVariables["${_varName}"]="${_varValue}";
  fi
}

# fun: ENVVAR.appendEnvironmentVariable varName
# api: private
# txt: Appends a new variable to the list of defined environment variables.
# opt: varName: The item to add.
# txt: Returns 0/TRUE always.
# use: ENVVAR.appendEnvironmentVariable "item";
function ENVVAR.appendEnvironmentVariable() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  if ! isEnvVarDefined "${_varName}"; then
    ENVVAR.getEnvironmentVariablesVariableName;
    local -n _envVariables="${RESULT}";
    _envVariables[${#_envVariables[@]}]="${_varName}";
  fi

  return ${TRUE};
}

# fun: evalEnvVar varName
# api: public
# txt: Evaluates given environment variable.
# opt: varName: the variable name.
# txt: Returns 0/TRUE if the environment variable is evaluated successfully; 1/FALSE otherwise.
# use: if evalEnvVar "MY_VAR"; then
# use:   echo "MY_VAR -> ${RESULT}";
# use: fi
function evalEnvVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;
  local -i _rescode;

  if ENVVAR.removeDollarCurlyBrackets "${_varName}"; then
    evalVar "${RESULT}";
  else
    local _defaultValue="";
    if ENVVAR.evalVarDefault "${_varName}"; then
      _defaultValue="${RESULT}";
    fi
    evalVar "${_varName}";
    local _varValue="${RESULT}";

    if isEmpty "${_varValue}"; then

      if ENVVAR.evalVarCommand "${_varName}"; then
        local _defaultCommand="${RESULT}";

        if isNotEmpty "${_defaultCommand}"; then
          logTrace -n "Resolving ${_varName}_DEFAULT via ${_varName}_DEFAULT_COMMAND (${_defaultCommand})"
          local _aux="$(set noglob; echo "${_defaultCommand}" | sh 2> /dev/null)";
          if isNotEmpty "${_aux}"; then
            _defaultValue="${_aux}";
            logTraceResult SUCCESS "${_aux}";
          else
            logTraceResult FAILURE "failed";
          fi
        fi
      fi
      _varValue="${_defaultValue}";
    fi

    if isNotEmpty "${_varValue}"; then
      while [[ "${_varValue}" =~ .*'$'.* ]]; do
        _varValue="$(set noglob; echo "echo ${_varValue}" | sh 2> /dev/null)";
      done
    fi

    if isNotEmpty "${_varValue}"; then
      export ${_varName}="${_varValue}" 2> /dev/null;
      _rescode=${TRUE};
      export RESULT="${_varValue}";
    else
      _rescode=${FALSE};
    fi
  fi

  return ${_rescode};
}

# fun: ENVVAR.isVarOverridden varName
# api: private
# txt: Checks if given variable is overridden.
# opt: varName: The variable to check.
# txt: Returns 0/TRUE if the variable is indeed overridden; 1/FALSE otherwise.
# use: if ENVVAR.isVarOverridden "myVar"; then
# use:   echo "myVar is overridden";
# use: fi
function ENVVAR.isVarOverridden() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  ENVVAR.getOverriddenEnvironmentVariablesVariableName;
  local -n _overriddenEnvVariables=${RESULT};

  local _oldIFS="${IFS}";
  IFS="${DWIFS}";
  for _aux in "${!_overriddenEnvVarVariables[@]}"; do
    IFS="${_oldIFS}";
    if areEqual "${_aux}" "${_varName}"; then
      _rescode=${TRUE};
      break;
    fi
  done
  IFS="${_oldIFS}";

  return ${_rescode};
}

# fun: ENVVAR.evalOverriddenVar varName
# api: private
# txt: Evaluates given overridden variable.
# opt: varName: The overridden variable.
# txt: Returns 0/TRUE if the variable is indeed overridden; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the value of the overridden variable.
# use: if ENVVAR.evalOverriddenVar "myVar"; then
# use:   echo "myVar -> ${RESULT}";
# use: fi
function ENVVAR.evalOverriddenVar() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  local _result="";

  if ENVVAR.isVarOverridden "${_varName}"; then
    ENVVAR.getOverriddenEnvironmentVariablesVariableName;
    local -n _overriddenEnvVariables=${RESULT};
    if arrayContains "${_varName}" "${!_overriddenEnvVariables[@]}"; then
      _result="${_overriddenEnvVariables[${_varName}]}";
      _rescode=${TRUE};
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.evalVarCommand varName
# api: private
# txt: Retrieves the command defined to retrieve a variable's default value.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the command is defined; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the command.
# use: if ENVVAR.evalVarCommand "myVar"; then
# use:   echo "myVar -> ${RESULT}";
# use: fi
function ENVVAR.evalVarCommand() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  local _result;

  ENVVAR.getEnvironmentVariablesCommandsVariableName;
  local -n _environmentVariablesCommands=${RESULT};

  if arrayContains "${_varName}" "${!_environmentVariablesCommands[@]}"; then
    _result="${_environmentVariablesCommands[${_varName}]}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.evalVarDefault varName
# api: private
# txt: Retrieves the default value for given variable.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the default value is defined; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the default value.
# use: if ENVVAR.evalVarDefault "myVar"; then
# use:   echo "myVar -> ${RESULT}";
# use: fi
function ENVVAR.evalVarDefault() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  local _result;
  ENVVAR.getEnvironmentVariablesDefaultsVariableName;
  local -n _environmentVariablesDefaults=${RESULT};
  if arrayContains "${_varName}" "${!_environmentVariablesDefaults[@]}"; then
    _result="${_environmentVariablesDefaults[${_varName}]}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.evalVarDescription varName
# api: private
# txt: Retrieves the variable description.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the variable description is defined; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the variable description.
# use: if ENVVAR.evalVarDescription "myVar"; then
# use:   echo "myVar -> ${RESULT}";
# use: fi
function ENVVAR.evalVarDescription() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  local _result;

  ENVVAR.getEnvironmentVariablesDescriptionsVariableName;
  local -n _environmentVariablesDescriptions=${RESULT};
  if arrayContains "${_varName}" "${!_environmentVariablesDescriptions[@]}"; then
    _result="${_environmentVariablesDescriptions[${_varName}]:-}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.removeDollarCurlyBrackets varName
# api: private
# txt: Removes the ${..} envelope.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the envelope was removed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the variable name, without envelope, if existed. Unset otherwise.
# use: if ENVVAR.removeDollarCurlyBrackets '${bla}'; then
# use:   echo "result -> ${RESULT}" # bla
# use: fi
function ENVVAR.removeDollarCurlyBrackets() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode;

  if areEqual "${_varName#$\{}" "${_varName}"; then
    _rescode=${FALSE};
  elif areEqual "${_varName%\}}" "${_varName}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    local _result="${_varName#$\{}";
    _result="${_result%\}}";
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: extractKeyInPair tuple
# api: public
# txt: Given a key=value, it extracts the key.
# opt: tuple: The pair.
# txt: Returns 0/TRUE if the key could be extracted; 1/FALSE otherwise.
# use: if extractKeyInPair "a=b"; then
# use:   echo "Key: ${RESULT}";
# use: fi
function extractKeyInPair() {
  local _pair="${1}";
  checkNotEmpty tuple "${_pair}" 1;

  ENVVAR.extractItemInPair "${_pair}" 0;
  local -i _rescode=$?;

  return ${_rescode};
}

# fun: extractValueInPair tuple
# api: public
# txt: Given a key=value, it extracts the value.
# opt: tuple: The pair.
# txt: Returns 0/TRUE if the value could be extracted; 1/FALSE otherwise.
# use: if extractValueInPair "a=b"; then
# use:   echo "Value: ${RESULT}";
# use: fi
function extractValueInPair() {
  local _pair="${1}";
  checkNotEmpty tuple "${_pair}" 1;

  ENVVAR.extractItemInPair "${_pair}" 1;
  local -i _rescode=$?;

  return ${_rescode};
}

# fun: ENVVAR.extractItemInPair tuple index
# api: private
# txt: Given a key=value, it extracts the element matching the index.
# opt: tuple: The pair.
# opt: index: The index (either 0 or 1).
# txt: Returns 0/TRUE if the element could be extracted; 1/FALSE otherwise.
# use: if ENVVAR.extractItemInPair "a=b" 1; then
# use:   echo "Element at 1: ${RESULT}"; # b
# use: fi
function ENVVAR.extractItemInPair() {
  local _pair="${1}";
  checkNotEmpty tuple "${_pair}" 1;
  local _index="${2}";
  checkNotEmpty index "${_index}" 2;

  local -i _rescode=${FALSE};
  local _result;

  local -a _pieces;
  if isNumber "${_index}" && split "${_pair}" "=" _pieces; then
    if nth ${_index} _pieces; then
      _result="${RESULT}";
      _rescode=${TRUE};
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: ENVVAR.checkMandatoryOrOptional paramValue paramIndex
# api: private
# txt: Performs a precondition check on given parameter to ensure it's either MANDATORY or OPTIONAL.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: ENVVAR.checkMandatoryOrOptional "${mandatoryOrOptional}" 1 # -> throws an error if the first (1) parameter ("paramValue") is neither MANDATORY or OPTIONAL.
function ENVVAR.checkMandatoryOrOptional() {
  local _value="${1}";
  checkNotEmpty paramValue "${_value}" 1;
  local _index="${2}";
  checkNotEmpty paramIndex "${_index}" 2;

  CHECK.checkOneOf 1 "MANDATORY|OPTIONAL" "${_value}" "MANDATORY OPTIONAL" "${_index}";
}

# fun: isVariableDefinedInFile file varName
# api: public
# txt: Checks if a variable is defined in given file.
# opt: file: The file.
# opt: varName: The name of the variable.
# txt: Returns 0/TRUE if the variable is defined; 1/FALSE otherwise.
# use: if isVariableDefinedInFile /tmp/my-script.sh RUN_COMMAND; then
# use:   echo "RUN_COMMAND is defined in /tmp/my-script.sh";
# use: fi
function isVariableDefinedInFile() {
  local _file="${1}";
  checkNotEmpty file "${_file}" 1;
  local _varName="${2}";
  checkNotEmpty varName "${_varName}" 2;

  grep -q -e "^\s*defineEnvVar ${_varName} " "${_file}";
  local -i _rescode=$?;

  return ${_rescode};
}

# fun: ENVVAR.isInEnvvarFormat varName
# api: private
# txt: Checks whether given variable name seems to be an environment variable reference.
# opt: varName: The variable name.
# txt: Returns 0/TRUE if the variable name could be an environment variable reference; 1/FALSE otherwise.
# use: if ENVVAR.isInEnvvarFormat "${myVarName}"; then
# use:   echo "${myVarName} might be an environment variable reference";
# use: fi
function ENVVAR.isInEnvvarFormat() {
  local _varName="${1}";
  checkNotEmpty varName "${_varName}" 1;

  local -i _rescode=${FALSE};

  if normalizeUppercase "${_varName}"; then
    local _candidate="${RESULT}";

    areEqual "${_varName}" "${_candidate}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: ENVVAR.resetState
# api: private
# txt: Resets the state of the module.
# txt: Returns 0/TRUE always.
# use: ENVVAR.resetState;
function ENVVAR.resetState() {
  ENVVAR.getModuleName;
  local _moduleName="${RESULT}";

  # env: ENVIRONMENT_VARIABLES: The defined environment variables.
  DW.declareGlobalArray "${_moduleName}" ENVIRONMENT_VARIABLES;
  # env: OVERRIDDEN_ENVIRONMENT_VARIABLES: The overridden environment variables.
  DW.declareGlobalMap "${_moduleName}" OVERRIDDEN_ENVIRONMENT_VARIABLES;
  # env: MANDATORY_ENVIRONMENT_VARIABLES: The mandatory environment variables.
  DW.declareGlobalMap "${_moduleName}" MANDATORY_ENVIRONMENT_VARIABLES;
  # env: ENVIRONMENT_VARIABLES_DEFAULTS: The default values of the environment variables.
  DW.declareGlobalMap "${_moduleName}" ENVIRONMENT_VARIABLES_DEFAULTS;
  # env: ENVIRONMENT_VARIABLES_DESCRIPTIONS: The descriptions of the environment variables.
  DW.declareGlobalMap "${_moduleName}" ENVIRONMENT_VARIABLES_DESCRIPTIONS;
  # env: ENVIRONMENT_VARIABLES_COMMANDS: The commands associated to the environment variables.
  DW.declareGlobalMap "${_moduleName}" ENVIRONMENT_VARIABLES_COMMANDS;
  # env: READONLY_ENVIRONMENT_VARIABLES: The read-only environment variables.
  DW.declareGlobalMap "${_moduleName}" READONLY_ENVIRONMENT_VARIABLES;
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
