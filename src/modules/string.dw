# mod: string
# api: public
# txt: String-related functions.

# fun: firstCharacter text
# api: public
# txt: Retrieves the first character of given text.
# opt: text: The input text.
# txt: Returns 0/TRUE if the text is not empty; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the first character.
# use: if firstCharacter "my-test"; then
# use:   echo "first character: ${RESULT}";
# use: fi
function firstCharacter() {
  local _input="${1}";
  checkNotEmpty text "${_input}" 1;
  local -i _rescode=${FALSE};
  local _result;

  if isNotEmpty "${_input}"; then
    _result="${_input:0:1}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: lastCharacter text
# api: public
# txt: Retrieves the last character of given text.
# opt: text: The input text.
# txt: Returns 0/TRUE if the text is not empty; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the last character.
# use: if lastCharacter "my-test"; then
# use:   echo "last character: ${RESULT}";
# use: fi
function lastCharacter() {
  local _input="${1}";
  checkNotEmpty text "${_input}" 1;

  local -i _rescode=${FALSE};
  local _result;

  if isNotEmpty "${_input}"; then
    _result="${_input: -1}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: contains text substring
# api: public
# txt: Checks whether the first parameter contains the second value.
# opt: text: The text.
# opt: substring: The substring to check.
# txt: Returns 0/TRUE if the text contains the substring; 1/FALSE otherwise.
# use: if contains "${text}" "b"; then
# use:   echo "${text} contains b";
# use: fi
function contains() {
  local _container="${1}";
  checkNotEmpty text "${_container}" 1;
  local _substring="${2}";
  checkNotEmpty substring "${_substring}" 2;

  local -i _rescode;

  if [ -z "${_container##*${_substring}*}" ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: endsWith text substring
# api: public
# txt: Checks whether the first parameter ends with the second value.
# opt: text: The text.
# opt: substring: The substring to check.
# txt: Returns 0/TRUE if the text ends with the substring; 1/FALSE otherwise.
# use: if endsWith "${text}" "c"; then
# use:   echo "${text} ends with c";
# use: fi
function endsWith() {
  local _container="${1}";
  checkNotEmpty text "${_container}" 1;
  local _substring="${2}";
  checkNotEmpty substring "${_substring}" 2;

  local -i _rescode;

  if areEqual "${_container%${_substring}}" "${_container}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: normalize text
# api: public
# txt: Normalizes given string: converts non-alphanumeric characters to underscore.
# opt: text: The text to normalize.
# txt: Returns 0/TRUE if the text could be normalized; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the normalized string.
# use: if normalize "a_b.C"; then
# use:   local normalized="${RESULT}"; # "a_b_C";
# use: fi
function normalize() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  local _result
  _result="$(echo "${_text}" 2> /dev/null | tr -c '[[:alnum:]]' '_' 2> /dev/null | sed 's/_*$//g' 2> /dev/null || echo "$$.ERROR.$$")";
  local -i _rescode;
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" 2> /dev/null | tr -c '[[:alnum:]]' '_' 2> /dev/null | sed 's/_*$//g';\n${_result}"
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: normalizeUppercase string
# api: public
# txt: Normalizes given string: converts non-alphanumeric characters to underscore, and converts it to upper case.
# opt: string: The string to convert.
# txt: Returns 0/TRUE if the text could be converted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the normalized string.
# use: if normalize "a_b.C"; then
# use:   local normalized="${RESULT}"; # "A_B_C";
# use: fi
function normalizeUppercase() {
  local _text="${1}";
  checkNotEmpty string "${_text}" 1;

  local -i _rescode;

  if normalize "${_text}"; then
    export RESULT="${RESULT^^}";
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: removePrefix text prefix
# api: public
# txt: Removes the prefix of given string.
# opt: text: The string to process.
# opt: prefix: The prefix to remove. It must not include the '%' character.
# txt: Returns 0/TRUE if the prefix was removed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the string without the prefix.
# use: if removePrefix "${_text}" "--*"; then
# use:   echo "${_text} -> ${RESULT}";
# use: fi
function removePrefix() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _prefix="${2}";
  checkNotEmpty prefix "${_prefix}" 2;

  local _result
  _result="$(command sed -e "s%^${_prefix}%%" <<< ${_text} 2> /dev/null || echo "$$.ERROR.$$")";
  local -i _rescode;
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="sed -e \"s%^${_prefix}%%\" <<< ${_text};\n${_result}";
  elif isNotEmpty "${_result}" && areEqual "${_text}" "${_result}"; then
    export ERROR="sed -e \"s%^${_prefix}%%\" <<< ${_text};\n${_result}";
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: removeSuffix text suffix
# api: public
# txt: Removes the suffix of given string.
# opt: text: The string to process.
# opt: suffix: The suffix to remove.
# txt: Returns 0/TRUE if the suffix was removed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the string without the suffix.
# use: if removeSuffix "${_text}" "-*"; then
# use:   echo "${_text} -> ${RESULT}";
# use: fi
function removeSuffix() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _suffix="${2}";
  checkNotEmpty suffix "${_suffix}" 2;

  local -i _rescode;
  local _result;

  if contains "${_suffix}" "~"; then
    _rescode=${FALSE};
  else
    _result="$(echo "${_text}" | sed -e "s~${_suffix}$~~" 2> /dev/null || echo "$$.ERROR.$$")";
    if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
      _rescode=${FALSE};
      export ERROR="echo \"${_text}\" | sed -e \"s~${_suffix}$~~\";\n${_result}"
    elif isNotEmpty "${_result}" && areEqual "${_text}" "${_result}"; then
      _rescode=${FALSE};
      export ERROR="echo \"${_text}\" | sed -e \"s~${_suffix}$~~\";\n${_result}"
    else
      _rescode=${TRUE};
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export RESULT="";
  fi

  return ${_rescode};
}

# fun: replaceNLeftmostTokens text newToken n separator
# api: public
# txt: Replaces the n leftmost tokens from given text.
# opt: text: The text to process.
# opt: newToken: The token replacement.
# opt: n: The number of tokens to replace.
# opt: separator: The separator.
# txt: Returns 0/TRUE if the n left-most tokens could be replaced; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the new text.
# use: if replaceNLeftmostTokens "a a a b b" "b" 3 " "; then
# use:   local text="${RESULT}"; # "b b b b b"
# use: fi
function replaceNLeftmostTokens() {
  local _text="$1";
  checkNotEmpty text "${_text}" 1;
  local _newToken="$2";
  checkNotEmpty newToken "${_newToken}" 2;
  local _number=$(($3));
  checkNotEmpty n "${_number}" 3;
  local _separator="$4";
  checkNotEmpty separator "${_separator}" 4;
  local -i _rescode;

  local _result
  _result="$(echo "${_text}" | awk -F"${_separator}" -vd=${_number} -vnewT="${_newToken}" -vseparator="${_separator}" '{for (i=0;i<d&&i<NF;i++) {printf("%s%s", newT, separator);}for (i=d+2;i<=NF;i++){printf("%s%s", $i, separator);}}END{printf("\n");}' | sed "s ${_separator}$  g" 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" | awk -F\"${_separator}\" -vd=${_number} -vnewT=\"${_newToken}\" -vseparator=\"${_separator}\" '{for (i=0;i<d&&i<NF;i++) {printf(\"%s%s\", newT, separator);}for (i=d+2;i<=NF;i++){printf(\"%s%s\", $i, separator);}}END{printf(\"\n\");}' | sed \"s ${_separator}$  g\";\n${_result}"
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: replaceNRightmostTokens text newToken n separator
# api: public
# txt: replaces the n rightmost tokens from given text.
# opt: text: the text to process.
# opt: newtoken: the token replacement.
# opt: n: the number of tokens to replace.
# opt: separator: the separator.
# txt: Returns 0/TRUE if the n right-most tokens could be replaced; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable result contains the new text.
# use: if replaceNRightmostTokens "a a a b b" "a" 2 " "; then
# use:   local text="${RESULT}"; # "a a a a a"
# use: fi
function replaceNRightmostTokens() {
  local _text="$1";
  checkNotEmpty text "${_text}" 1;
  local _newToken="$2";
  checkNotEmpty newToken "${_newToken}" 2;
  local _number=$(($3));
  checkNotEmpty n "${_number}" 3;
  local _separator="$4";
  checkNotEmpty separator "${_separator}" 4;
  local -i _rescode;

  local _result
  _result="$(echo "${_text}" 2> /dev/null | awk -F"${_separator}" -vd=${_number} -vnewT="${_newToken}" -vseparator="${_separator}" '{for (i=NF;i>NF-d&&i>0;i--) {if (newT!="") {printf("%s%s", newT, separator);}}for (i=NF-d;i>0;i--){printf("%s%s", $i, separator);}}END{printf("\n");}' 2> /dev/null | sed "s ${_separator}$  g" 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" 2> /dev/null | awk -F\"${_separator}\" -vd=${_number} -vnewT=\"${_newToken}\" -vseparator=\"${_separator}\" '{for (i=NF;i>NF-d&&i>0;i--) {if (newT!="") {printf(\"%s%s\", newT, separator);}}for (i=NF-d;i>0;i--){printf(\"%s%s\", $i, separator);}}END{printf(\"\\n\");}' 2> /dev/null | sed \"s ${_separator}$  g\";\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: startsWith text substring
# api: public
# txt: Checks whether the first parameter starts with the second value.
# opt: text: The text.
# opt: substring: The substring to check.
# txt: Returns 0/TRUE if the text starts with the substring; 1/FALSE otherwise.
# use: if startsWith "${text}" "a"; then
# use:   echo "${text} starts with a";
# use: fi
function startsWith() {
  local _container="${1}";
  checkNotEmpty text "${_container}" 1;
  local _substring="${2}";
  checkNotEmpty substring "${_substring}" 2;

  local -i _rescode;

  if areEqual "${_container#${_substring}}" "${_container}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: toLower text
# api: public
# txt: Converts given string to lower case.
# opt: text: The string to convert.
# txt: Returns 0/TRUE if the text could be converted to lower case; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the converted string.
# use: local _text="ABC";
# use: if toLower "${_text}"; then
# use:   local _lowerCase="${RESULT}";
# use: fi
function toLower() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local -i _rescode;

  local _result
  _result="$(echo "${_text}" 2> /dev/null | awk '{print tolower($0);}' 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" 2> /dev/null | awk '{print tolower($0);}';\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: toUpper text
# api: public
# txt: Converts given string to upper case.
# opt: text: The string to convert.
# txt: Returns 0/TRUE if the text could be converted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the string in upper case.
# use: local _text="abc";
# use: if toUpper "${_text}"; then
# use:   local _upcased="${RESULT}";
# use: fi
function toUpper() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local -i _rescode;

  local _result
  _result="$(echo "${_text}" 2> /dev/null | awk '{print toupper($0);}' 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" 2> /dev/null | awk '{print toupper($0);}';\n${_result}"
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${TRUE};
}

# fun: replaceAll text old replacement
# api: public
# txt: Replaces all occurrences of a string in given text.
# opt: text: The text to process.
# opt: old: The string to replace.
# opt: replacement: The replacement.
# txt: Returns 0/TRUE if anything was replaced; 1/FALSE otherwise.
# use: if replaceAll "a b c" " " ","; then
# use:   ...;
# use: fi
function replaceAll() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _old="${2}";
  checkNotEmpty old "${_old}" 2;
  local _replacement="${3}";
  checkNotEmpty replacement "${_replacement}" 3;

  local -i _rescode;

  local _result;

  local _saneOld="${_old//\//\\/}";
  local _saneReplacement="${_replacement//\//\\/}";
  _saneReplacement="${_saneReplacement//&/\\&}";
  _saneReplacement="${_saneReplacement//\\/\\\\}";

  _result="$(echo "${_text}" | sed "s/${_saneOld}/${_saneReplacement}/g")";

  if areEqual "${_text}" "${_result}"; then
    _rescode=${FALSE};
    export RESULT="";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: split text separator arrayName
# api: public
# txt: Splits given text using a separator.
# opt: text: The text.
# opt: separator: The separator.
# opt: arrayName: The destination array.
# txt: Returns 0/TRUE if the text could be splitted; 1/FALSE otherwise.
# use: if split "${csvVariable}" "," arr; then
# use:   echo "Splitted: ${arr[@]}";
# use: fi
function split() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _separator="${2}";
  checkNotEmpty separator "${_separator}" 2;
  local _arrayName="${3}";
  checkNotEmpty arrayName "${_arrayName}" 3;
  local -n _split=${_arrayName};

  local -i _rescode=${FALSE};

  local -i _i=0;

  local _oldIFS="${IFS}";
  IFS="${_separator}";
  local _aux;
  while read -ra _aux; do
    IFS="${DWIFS}";
    local -i _k;
    for _k in $(seq 0 1 ${#_aux[@]}); do
      IFS="${_oldIFS}";
      if ! isEmpty "${_aux[${_k}]}"; then
        _split[${_i}]=${_aux[${_k}]};
        ((_i++));
      fi
    done
    IFS="${_oldIFS}";
    _rescode=${TRUE};
  done <<< "${_text}"

  local -i _j;
  IFS="${DWIFS}";
  for _j in $(seq ${#_split[@]} 1 ${_i}); do
    IFS="${_oldIFS}";
    unset _split[${_j}];
  done

  return ${_rescode};
}

# fun: startsAndEndsWith text delimiter
# api: public
# txt: Checks whether given text is surrounded by a specific delimiter.
# opt: text: The text.
# opt: delimiter: The delimiter.
# txt: Returns 0/TRUE if the text starts and ends with given delimiter; 1/FALSE otherwise.
# use: if startsAndEndsWith "${line}" '|'; then
# use:   echo "Org table format";
# use: fi
function startsAndEndsWith() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _delimiter="${2}";
  checkNotEmpty delimiter "${_delimiter}" 2;

  local -i _rescode=${FALSE};

  if startsWith "${_text}" "${_delimiter}" && endsWith "${_text}" "${_delimiter}"; then
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: removeSurrounding text delimiter
# api: public
# txt: Removes the delimiter at the start and at the end of given text.
# opt: text: The text.
# opt: delimiter: The delimiter.
# txt: Returns 0/TRUE if the delimiter was actually surrounding the text; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE; the variable RESULT contains the text without the delimiters.
# use: if removeSurrounding "${var}" '"'; then
# use:   echo "Resulting var: ${RESULT}";
# use: fi
function removeSurrounding() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _delimiter="${2}";
  checkNotEmpty delimiter "${_delimiter}" 2;

  local _result;
  local -i _rescode=${FALSE};

  if removePrefix "${_text}" "${_delimiter}"; then
    _result="${RESULT}";
    _rescode=${TRUE};
    if isNotEmpty "${_result}"; then
      if removeSuffix "${_result}" "${_delimiter}"; then
        _result="${RESULT}";
      fi
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: trim text
# api: public
# txt: Removes any blank spaces at the start and at the end of given text.
# opt: text: The text.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the trimmed text.
# use: trim "${var}" '"';
# use: echo "Trimmed var: ${RESULT}";
function trim() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

#  export RESULT="$(echo "${_text}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')";

  local _leftTrimmed="${_text#"${_text%%[![:space:]]*}"}";
  local _result="${_leftTrimmed%"${_leftTrimmed##*[![:space:]]}"}";
  export RESULT="${_result}";

  return ${TRUE};
}

# fun: keyValueSplit text
# api: public
# txt: Splits given text into a newline-delimited key=value pairs.
# opt: text: The text.
# txt: Returns 0/TRUE if the text was splitted successfuly; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the splitted pairs.
# use: if keyValueSplit "${vars}"; then
# use:   IFS='\n' for var in ${vars}; do
# use:     echo "var: ${var}";
# use:   done;
# use: fi
function keyValueSplit() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local -i _rescode;

  local _result;
  _result="$(echo -e "${_text}" 2> /dev/null | awk -F'=' '\
function printKey(text,     value, len) {
  len=split(text, value, " ");
  if (len > 1) {
    printf("%s=", value[len]);
  }
}
function printValue(text,   value, len, a) {
  len=split(text, value, " ");
  if (len > 1) {
    for (a=1; a<len-1; a++) {
      printf("%s ", value[a]);
    };
    printf("%s\n", value[len-1]);
  }
}
{ printf("%s=", $1); for (i=2; i<NF; i++) {printValue($i); printKey($i);}; printf("%s\n", $NF); }' 2> /dev/null || echo "$$.ERROR.$$")";

  #  len=split(text, value, " ");
  #  if (len > 1) {
  #         printf("%s=", value[0]);
  #         for (i=1; i<len-2; i++) {
  #                 printf("%s ", value[i]);
  #             };
  #             print;
  #     }
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo -e \"${_text}\" 2> /dev/null | awk -F'=' ' \
function printKey(text,     value, len) { \
  len=split(text, value, \" \"); \
  if (len > 1) { \
    printf(\"%s=\", value[len]); \
  } \
} \
function printValue(text,   value, len, a) { \
  len=split(text, value, \" \"); \
  if (len > 1) { \
    for (a=1; a<len-1; a++) { \
      printf(\"%s \", value[a]); \
    }; \
    printf(\"%s\\n\", value[len-1]); \
  } \
} \
{ printf(\"%s=\", $1); for (i=2; i<NF; i++) {printValue($i); printKey($i);}; printf(\"%s\\n\", $NF); }';\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: splitAndExtract input separator index
# api: public
# txt: Extracts an item after splitting given input using a separator.
# opt: input: The input.
# opt: separator: The separator.
# opt: index: The 0-based index of the item to extract.
# txt: Returns 0/TRUE if the item was extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the requested item.
# use: if splitAndExtract "2019-09-01" "-" 0; then
# use:   echo "Year: ${RESULT}";
# use: fi
function splitAndExtract() {
  local _input="${1}";
  checkNotEmpty input "${_input}" 1;
  local _separator="${2}";
  checkNotEmpty separator "${_separator}" 2;
  local _index="${3}";
  checkNotEmpty index "${_index}" 3;

  local -i _rescode=${FALSE};
  local _result;
  local -a _items;

  if split "${_input}" "${_separator}" _items; then
    _result="${_items[${_index}]}";
    _rescode=${TRUE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: sha512 value
# api: public
# txt: Calculates the SHA-512 hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha512 "myText"; then
# use:   echo "SHA-512: ${RESULT}";
# use: fi
function sha512() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha512 "${_value}";
}

# fun: sha384 value
# api: public
# txt: Calculates the SHA-384 hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha384 "myText"; then
# use:   echo "SHA-384: ${RESULT}";
# use: fi
function sha384() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha384 "${_value}";
}

# fun: sha256 value
# api: public
# txt: Calculates the SHA-256 hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha256 "myText"; then
# use:   echo "SHA-256: ${RESULT}";
# use: fi
function sha256() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha256 "${_value}";
}

# fun: sha224 value
# api: public
# txt: Calculates the SHA-224 hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha224 "myText"; then
# use:   echo "SHA-224: ${RESULT}";
# use: fi
function sha224() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha224 "${_value}";
}

# fun: sha1 value
# api: public
# txt: Calculates the SHA-1 hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha1 "myText"; then
# use:   echo "SHA-1: ${RESULT}";
# use: fi
function sha1() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha1 "${_value}";
}

# fun: sha value
# api: public
# txt: Calculates the SHA hash of given value.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if sha "myText"; then echo
# use: "SHA: ${RESULT}";
# use: fi
function sha() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  hash sha "${_value}";
}

# fun: hash hash value
# api: public
# txt: Calculates a hash of given value.
# opt: hash: The hash.
# opt: value: The value.
# txt: Returns 0/TRUE if the hash was calculated; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash value.
# use: if hash sha512 "myText"; then
# use:   echo "SHA-512: ${RESULT}";
# use: fi
function hash() {
  local _hash="${1}";
  checkNotEmpty hash "${_hash}" 1;
  local _value="${2}";
  checkNotEmpty value "${_value}" 2;
  local -i _rescode;

  local _result
  _result="$(echo -n "${_value}" 2> /dev/null | ${_hash}sum 2> /dev/null 2> /dev/null | cut -f1 -d" " 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo -n \"${_value}\" 2> /dev/null | ${_hash}sum 2> /dev/null 2> /dev/null | cut -f1 -d\" \";\n${_result})";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: countMatchesOfCharsInString chars string
# api: public
# txt: Counts the number of occurrences of given characters in a string.
# opt: chars: The characters.
# opt: string: The string.
# txt: Returns 0/${TRUE} if the input is valid; 1/${FALSE} otherwise.
# txt: If the function returns 0/${TRUE}, the variable RESULT contains the number of occurrences.
# use: if countMatchesOfCharsInString 'ab' 'abcaba'; then
# use:   echo "Occurrences: ${RESULT} (should be 5)";
# use: fi
function countMatchesOfCharsInString() {
  local _chars="${1}";
  checkNotEmpty chars "${_chars}" 1;
  local _string="${2}";
  checkNotEmpty string "${_string}" 2;

  local _aux="${_string//[^${_chars}]}";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    local _result="${#_aux}";
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: camelCaseToPascalCase text
# api: public
# txt: Converts given text in camel case to Pascal case.
# opt: text: The text to convert.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the text in Pascal case.
# use: camelCaseToPascalCase "baseFolder";
# use: echo "baseFolder -> ${RESULT}";
function camelCaseToPascalCase() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  camelCaseToSnakeCase "${_text}";
  snakeCaseToPascalCase "${RESULT}";

  return ${TRUE};
}

# fun: camelCaseToSnakeCase text
# api: public
# txt: Converts given text in camel case to snake case.
# opt: text: The text to convert.
# txt: Returns 0/${TRUE} if the conversion works; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the text in snake case.
# use: if camelCaseToSnakeCase "baseFolder"; then
# use:   echo "baseFolder -> ${RESULT}"; # base_folder
# use: fi
function camelCaseToSnakeCase() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  local _result="";
  local -i _rescode=${FALSE};
  
  _result="$(echo "${_text}" | awk '{
    head = ""
    tail = $0
    while ( match(tail,/[[:upper:]]/) ) {
        tgt = substr(tail,RSTART,1)
        if ( substr(tail,RSTART-1,1) ~ /[[:lower:]]/ ) {
            tgt = "_" tolower(tgt)
        }
        head = head substr(tail,1,RSTART-1) tgt
        tail = substr(tail,RSTART+1)
    }
    print head tail
}')";
  _rescode=$?;
  if isTrue ${_rescode}; then
    uncapitalize "${_result}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: snakeCaseToCamelCase text
# api: public
# txt: Converts given text in snake case to camel case.
# opt: text: The text to convert.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the text in camel case.
# use: snakeCaseToCamelCase "output_file";
# use: echo "output_file -> ${RESULT}";
function snakeCaseToCamelCase() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  snakeCaseToPascalCase "${_text}";
  uncapitalize "${RESULT}";
  return $?;
}

# fun: toCamelCase text
# api: public
# txt: Converts given text to camel case.
# opt: text: The text to convert.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the text in camel case.
# use: toCamelCase "output_file";
# use: echo "output_file -> ${RESULT}";
function toCamelCase() {
  local _text="${1}"
  checkNotEmpty text "${_text}" 1
  local -i _rescode

  local _result
  _result="$(echo "${_text}" 2> /dev/null | awk 'function toCamel(s) { camel = ""; split(s, words, /-|[^a-zA-Z0-9]/); for (i = 1; i in words; i++) {camel = camel toupper(substr(words[i], 1, 1)) tolower(substr(words[i], 2))}; return camel} NF { printf "%s\n", toCamel($0)}' 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="echo \"${_text}\" 2> /dev/null | awk 'function toCamel(s) { camel = \"\"; split(s, words, /-|[^a-zA-Z0-9]/); for (i = 1; i in words; i++) {camel = camel toupper(substr(words[i], 1, 1)) tolower(substr(words[i], 2))}; return camel} NF { printf \"%s\\n\", toCamel($0)}';\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: snakeCaseToPascalCase text
# api: public
# txt: Converts given text in snake case to Pascal case.
# opt: text: The text to convert.
# txt: Returns 0/${TRUE} if the text could be converted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the text in Pascal case.
# use: if snakeCaseToPascalCase "output_file"; then
# use:   echo "output_filer -> ${RESULT}";
# use: fi
function snakeCaseToPascalCase() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  local _result="";
  local -i _rescode=${FALSE};
  
  _result="$(echo "${_text}" | awk '{
    head = ""
    tail = $0
    while ( match(tail,/_/) ) {
        tgt = substr(tail,RSTART+1,1)
        if ( tgt ~ /[[:lower:]]/ ) {
            tgt = toupper(tgt)
        }
        head = head substr(tail,1,RSTART-1) tgt
        tail = substr(tail,RSTART+2)
    }
    print head tail
}')";
  
  _rescode=$?;
  if isTrue ${_rescode}; then
    capitalize "${_result}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: uncapitalize text
# api: public
# txt: Uncapitalizes given text.
# opt: text: The text to uncapitalize.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the uncapitalized text.
# use: uncapitalize "MyText";
# use: echo "uncapitalized: ${RESULT}";
function uncapitalize() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  tailText "${_text}";
  local _tail="${RESULT}";

  firstCharacter "${_text}";
  local _firstCharacter="${RESULT}";

  toLower "${_firstCharacter}";
  local _result="${RESULT}${_tail}";

  export RESULT="${_result}";

  return ${TRUE};
}

# fun: capitalize text
# api: public
# txt: Capitalizes given text.
# opt: text: The text to capitalize.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the capitalized text.
# use: capitalize "MyText";
# use: echo "capitalized: ${RESULT}";
function capitalize() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;

  tailText "${_text}";
  local _tail="${RESULT}";

  firstCharacter "${_text}";
  local _firstCharacter="${RESULT}";

  toUpper "${_firstCharacter}";
  local _result="${RESULT}${_tail}";

  export RESULT="${_result}";

  return ${TRUE};
}

# fun: tailText text
# api: public
# txt: Removes the first character.
# opt: text: The text.
# txt: Returns 0/${TRUE} if the first character could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the original text after removing the first character.
# use: if tailText "aText"; then
# use:   echo "${RESULT}";
# use: fi
function tailText() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local -i _rescode;

  local _result
  _result="$(cut -c2- <<< ${_text} 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="cut -c2- <<< ${_text};\n${_result}";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: stringLength text
# api: public
# txt: Retrieves the length of the text, in characters.
# opt: text: The text.
# txt: Returns 0/${TRUE} always.
# txt: The variable RESULT contains the string length.
# use: stringLength "abc";
# use: echo "length: ${RESULT}";
function stringLength() {
  local _text="${@}";
  checkNotEmpty text "${_text}" 1;

  export RESULT="${#_text}";

  return ${TRUE};
}

# fun: startsWithSpace text
# api: public
# txt: Checks whether given text starts with space.
# opt: text: The text.
# txt: Returns 0/${TRUE} if the text starts with space; 1/0 otherwise.
# use: if startsWithSpace "${myVar}"; then
# use:   echo "${myVar} starts with space";
# use: fi
function startsWithSpace() {
  local _text="${@}";
  checkNotEmpty text "${_text}" 1;

  local -i _rescode;
  if [[ "${_text# }" == "${_text}" ]]; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
