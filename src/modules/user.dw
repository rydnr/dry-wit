# mod: user
# api: public
# txt: Functions related to user and groups.

# fun: addUserToGroup userName groupName
# api: public
# txt: Adds given user to a group.
# opt: userName: The user name.
# opt: groupName: The group name.
# txt: Returns 0/TRUE if the user gets added to the group successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains some output.
# use: if addUserToGroup guest users; then
# use:   echo "User guest added to group users";
# use: fi
function addUserToGroup() {
  local _user="${1}"
  checkNotEmpty userName "${_user}" 1
  local _group="${2}"
  checkNotEmpty groupName "${_group}" 2

  local _result
  _result="$(gpasswd -a ${_user} ${_group} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: createGroup groupName groupId?
# api: public
# txt: Creates a new group.
# opt: groupName: The group name.
# opt: groupId: The group id. Optional.
# txt: Returns 0/TRUE if the group gets created successfully; 1/FALSE otherwise.
# use: if createGroup "fakegroup"; then
# use:   echo "fakegroup created successfully";
# use: fi
function createGroup() {
  local _groupName="${1}"
  checkNotEmpty groupName "${_groupName}" 1
  local _gid="${2}"

  logDebug -n "Creating group ${_groupName}"

  local _result
  local -i _rescode

  if isEmpty "${_gid}"; then
    _result="$(groupadd "${_groupName}" 2>/dev/null)"
    _rescode=$?
  else
    _result="$(groupadd -g "${_gid}" "${_groupName}" 2>/dev/null)"
    _rescode=$?
  fi

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: createUser userName
# api: public
# txt: Creates a new user.
# opt: userName: The user name.
# txt: Returns 0/TRUE if the user gets created successfully; 1/FALSE otherwise.
# use: if createUser "fakeuser"; then
# use:   echo "fakeuser created successfully";
# use: fi
function createUser() {
  local _userName="${1}"
  checkNotEmpty userName "${_userName}" 1

  logDebug -n "Creating user ${_userName}"

  local _result
  _result="$(useradd -M -N -l "${_userName}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: deleteGroup groupName
# api: public
# txt: Deletes given group.
# opt: groupName: The group name.
# txt: Returns 0/TRUE if the group is removed successfully; 1/FALSE otherwise.
# use: if deleteGroup "fakegroup"; then
# use:   echo "fakegroup deleted successfully";
# use: fi
function deleteGroup() {
  local _groupName="${1}"
  checkNotEmpty groupName "${_groupName}" 1

  logDebug -n "Deleting group ${_groupName}"

  local _result
  _result="$(groupdel "${_groupName}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: deleteUser userName
# api: public
# txt: Deletes given user.
# opt: userName: The user name.
# txt: Returns 0/TRUE if the user is removed successfully; 1/FALSE otherwise.
# use: if deleteUser "fakeuser"; then
# use:   echo "fakeuser deleted successfully";
# use: fi
function deleteUser() {
  local _userName="${1}"
  checkNotEmpty userName "${_userName}" 1

  logDebug -n "Deleting user ${_userName}"

  local _result
  _result="$(userdel "${_userName}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: gidAlreadyExists gid
# api: public
# txt: Checks whether given gid already exists.
# opt: gid: The group id.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if gidAlreadyExists 103; then
# use:   ...;
# use: fi
function gidAlreadyExists() {
  local _gid="${1}"
  checkNotEmpty gid "${_gid}" 1

  logDebug -n "Checking if gid ${_gid} already exists"
  local _result
  _result="$(getent group ${_gid} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "true"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "false"
  fi

  return ${_rescode}
}

# fun: groupAlreadyExists group
# api: public
# txt: Checks whether given group already exists.
# opt: group: The group name.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if groupAlreadyExists users; then
# use:   ...;
# use: fi
function groupAlreadyExists() {
  local _group="${1}"
  checkNotEmpty group "${_group}" 1

  logDebug -n "Checking if group ${_group} already exists"
  local _result
  _result="$(getent group ${_group} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "true"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "false"
  fi

  return ${_rescode}
}

# fun: resolveCommandForUser userName command
# api: public
# txt: Resolves the path of a command for given user.
# opt: userName: The user.
# opt: command: The command.
# txt: Returns 0/TRUE if the command gets resolved to a path for given user; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the path of 'command' for given user.
# use: if resolveCommandForUser "${SERVICE_USER}" "gradle"; then
# use:   local _command="${RESULT}";
# use: fi
function resolveCommandForUser() {
  local _user="${1}"
  checkNotEmpty userName "${_user}" 1
  local _command="${2}"
  checkNotEmpty command "${_command}" 2

  local _result
  _result="$(su - ${_user} -c "which ${_command}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: retrieveGidFromGroup group
# api: public
# txt: Retrieves the id of a given group.
# opt: group: The group name.
# txt: Returns 0/TRUE if the group was retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the group id.
# use: retrieveGidFromGroup "admin";
# use: echo "The id of group admin is ${RESULT}";
function retrieveGidFromGroup() {
  local _group="${1}"
  checkNotEmpty group "${_group}" 1

  logDebug -n "Retrieving gid of group ${_group}"
  local _result
  _result="$(getent group ${_group} 2>/dev/null | cut -d':' -f3 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "${_result}"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: retrieveGroupFromGid gid
# api: public
# txt: Retrieves the group id of given group.
# opt: gid: The group id.
# txt: Returns 0/TRUE if the gid is processed successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the group id.
# use: if retrieveGroupFromGid "100"; then
# use:   echo "The name of group 1 is ${RESULT}";
# use: fi
function retrieveGroupFromGid() {
  local _gid="${1}"
  checkNotEmpty gid "${_gid}" 1

  local _result
  _result="$(getent group ${_gid} 2>/dev/null | cut -d':' -f1 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: retrieveOwnerGid path
# api: public
# txt: Retrieves the id of the owner group of given file or folder.
# opt: path: The file or folder.
# txt: Returns 0/TRUE if the owner information is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the group that owns the file or folder.
# use: if retrieveOwnerGid /tmp; then
# use:   echo "The id of the group of /tmp is ${RESULT}";
# use: fi
function retrieveOwnerGid() {
  local _file="${1}"
  checkNotEmpty path "${_file}" 1

  local _result
  _result="$(stat -c '%g' "${_file}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: retrieveOwnerUid path
# api: public
# txt: Retrieves the uid of the owner user of given file or folder.
# opt: path: The file or folder.
# txt: Returns 0/TRUE if the owner information is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the user that owns the file or folder.
# use: if retrieveOwnerUid /tmp; then
# use:   echo "The id of the owner of /tmp is ${RESULT}";
# use: fi
function retrieveOwnerUid() {
  local _file="${1}"
  checkNotEmpty path "${_file}" 1

  local _result
  _result="$(stat -c '%u' "${_file}" 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: retrieveUidFromUser user
# api: public
# txt: Retrieves the id of a given user.
# opt: user: The user name.
# txt: Returns 0/TRUE if the user is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the user id.
# use: if retrieveUidFromUser "root"; then
# use:   echo "The id of user root is ${RESULT}";
# use: fi
function retrieveUidFromUser() {
  local _user="${1}"
  checkNotEmpty user "${_user}" 1

  logDebug -n "Retrieving uid of user ${_user}"

  local _result
  _result="$(getent passwd ${_user} 2>/dev/null | cut -d':' -f3 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "${_result}"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: retrieveUserFromUid uid
# api: public
# txt: Retrieves the user id of given user.
# opt: uid: The user id.
# txt: Returns 0/TRUE if the user is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the user id.
# use: if retrieveUserFromUid "1"; then
# use:   echo "The name of user 1 is ${RESULT}";
# use: fi
function retrieveUserFromUid() {
  local _uid="${1}"
  checkNotEmpty uid "${_uid}" 1

  local _result
  _result="$(getent passwd ${_uid} 2>/dev/null | cut -d':' -f1 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: uidAlreadyExists uid
# api: public
# txt: Checks whether given uid already exists.
# opt: uid: The user id.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if uidAlreadyExists 1; then
# use:   ...;
# use: fi
function uidAlreadyExists() {
  local _uid="${1}"
  checkNotEmpty uid "${_uid}" 1

  logDebug -n "Checking if uid ${_uid} is already used"
  local _result
  _result="$(getent passwd ${_uid} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${rescode}
}

# fun: updateGroupGid groupName gid
# api: public
# txt: Updates the gid of the group.
# opt: groupName: The group name.
# opt: gid: The group id.
# txt: Returns 0/TRUE if the group's gid is updated successfully; 1/FALSE otherwise.
# use: if updateGroupGid "guests" 103; then
# use:   echo "guests' gid is now 103";
# use: fi
function updateGroupGid() {
  local _group="${1}"
  checkNotEmpty groupName "${_group}" 1
  local _gid="${2}"
  checkNotEmpty gid "${_gid}" 2

  logDebug -n "Changing ${_group}'s gid to ${_gid}"
  local _result
  _result="$(groupmod -g ${_gid} ${_group} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: updateUserGid userName gid
# api: public
# txt: Updates the gid of the user.
# opt: userName: The user.
# opt: gid: The group id.
# txt: Returns 0/TRUE if the user's gid is updated successfully; 1/FALSE otherwise.
# use: if updateUserGid "guest" 103; then
# use:   echo "Guest's gid is now 103";
# use: fi
function updateUserGid() {
  local _user="${1}"
  checkNotEmpty userName "${_user}" 1
  local _gid="${2}"
  checkNotEmpty gid "${_gid}" 2

  logDebug -n "Changing ${_user}'s primary group to ${_gid}"
  local _result
  _result="$(usermod -g ${_gid} ${_user} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    _rescode=${TRUE}
    logDebugResult NEUTRAL "unneeded"
  fi

  return ${_rescode}
}

# fun: updateUserUid userName uid
# api: public
# txt: Updates the uid of the user.
# opt: userName: The user.
# opt: uid: The uid.
# txt: Returns 0/TRUE if the user's uid is updated successfully; 1/FALSE otherwise.
# use: if updateUserUid "guest" 1001; then
# use:   echo "User guest's uid is now 1001";
# use: fi
function updateUserUid() {
  local _user="${1}"
  checkNotEmpty userName "${_user}" 1
  local _uid="${2}"
  checkNotEmpty uid "${_uid}" 2

  logDebug -n "Changing ${_user}'s uid to ${_uid}"
  local _result
  _result="$(usermod -u ${_uid} ${_user} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "failed"
  fi

  return ${_rescode}
}

# fun: userAlreadyExists user
# api: public
# txt: Checks whether given user already exists.
# opt: user: The user name.
# txt: Returns 0/TRUE if it exists; 1/FALSE otherwise.
# use: if userAlreadyExists guest; then
# use:   ...;
# use: fi
function userAlreadyExists() {
  local _user="${1}"
  checkNotEmpty user "${_user}" 1

  logDebug -n "Checking if user ${_user} is already used"
  local _result
  _result="$(getent passwd ${_user} 2>/dev/null)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "true"
    export RESULT="${_result}"
  else
    logDebugResult FAILURE "false"
  fi

  return ${_rescode}
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
