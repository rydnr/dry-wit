# mod: array
# api: public
# txt: Functions related to arrays and associative arrays.

# fun: arrayContains element array
# api: public
# txt: Checks if an element is already contained in an array.
# opt: element: The element to check.
# opt: array: The array (passed as "${array[@]}").
# txt: Returns 0/TRUE if the element is present in the array; 1/FALSE otherwise.
# use: a=("one" "two" "three" "other number");
# use: if arrayContains "other number" "${a[@]}"; then
# use:   echo "${a[@]} contains 'other number';
# use: fi
function arrayContains() {
  local _item="${1}";
  checkNotEmpty item "${_item}" 1;

  shift;
  local _array="${@}";
  # array can be empty.

  local -i _rescode=${FALSE};

  local _oldIFS="${IFS}";

  IFS="${DWIFS}";
  local _aux;
  for _aux in ${_array}; do
    IFS="${_oldIFS}";

    if areEqual "${_aux}" "${_item}"; then
      _rescode=${TRUE};
      break;
    fi
  done
  IFS="${_oldIFS}";

  return ${_rescode};
}

# fun: arrayDoesNotContain element array
# api: public
# txt: Checks if an element is not already contained in an array.
# opt: element: The element to check.
# opt: array: The array (passed as "${array[@]}").
# txt: Returns 0/TRUE if the element is not present in the array; 1/FALSE Otherwise.
# use: a=("one" "two" "three" "other number");
# use: if arrayDoesNotContain "four" "${a[@]}"; then
# use:   echo "${a[@]} does not contain 'four'";
# use: fi
function arrayDoesNotContain() {
  local _item="${1}";
  checkNotEmpty item "${_item}" 1;
  shift;
  local _array="${@}";
  checkNotEmpty array "${_array}" 2;

  local -i _rescode;

  if arrayContains "${_item}" "${_array}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: getIndexOfItemInArray item array
# api: public
# txt: Retrieves the index of given item in an array.
# txt: item: The item.
# txt: array: The array (passed as "${array[@]}")
# txt: Returns 0/TRUE if the item was found in the array; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the index of the item.
# use: if getIndexOfItemInArray "a" "a b c"; then
# use:   echo "Index of 'a': ${RESULT}";
# use: fi
function getIndexOfItemInArray() {
  local _item="${1}";
  checkNotEmpty item "${_item}" 1;
  shift;
  local _array="${@}";
  checkNotEmpty array "${_array}" 2;

  local _oldIFS="${IFS}";

  local -i _rescode=${FALSE};
  local -i _result;

  IFS="${DWIFS}";
  local _arrayItem;
  local -i _i=0;
  for _arrayItem in ${_array[@]}; do
    IFS="${_oldIFS}";
    if areEqual "${_item}" "${_arrayItem}"; then
      _result=${_i};
      _rescode=${TRUE};
      break;
    fi
    _i=$((_i+1));
  done;
  IFS="${_oldIFS}";

  if isTrue ${_rescode}; then
    export RESULT=${_result};
  fi

  return ${_rescode};
}

# fun: clearAssociativeArray arrayName
# api: public
# txt: Clears given associative array.
# opt: arrayName: The name of the associative array.
# txt: Returns 0/TRUE always.
# use: clearAssociativeArray myArray;
function clearAssociativeArray() {
  local _arrayName="${1}";
  checkNotEmpty arrayName "${_arrayName}" 1;

  declare -n _directArray="${_arrayName}";

  local _oldIFS="${IFS}";
  IFS="${DWIFS}";
  local _key;
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    unset _directArray[${_key}];
  done
  IFS="${_oldIFS}";
}

# fun: flattenArray arrayName separator
# api: public
# txt: Flattens an array, using given separator.
# opt: arrayName: The name of the array variable.
# opt: separator: The separator to use.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the resulting string.
# use: A=(a b c);
# use: flattenArray A "x";
# use: echo "A->${RESULT}" # axbxc
function flattenArray() {
  local _arrayName="${1}";
  checkNotEmpty arrayName "${_arrayName}" 1;
  local _separator="${2}";
  checkNotEmpty separator "${_separator}" 2;
  local _result="";
  local _oldIFS="${IFS}";

  local _aux="$(echo "\${#${_arrayName}[@]}")";
  local -i _len=$((-1+$(eval echo "${_aux}")));

  IFS="${DWIFS}";
  local -i _i;
  for _i in $(seq 0 1 ${_len}); do
    IFS="${_oldIFS}";
    _aux="$(echo "\${${_arrayName}[${_i}]}")";
    _item=$(eval echo "${_aux}");
    _result="${_result}${_separator}${_item}";
  done
  IFS="${_oldIFS}";

  _result="${_result#${_separator}}";

  export RESULT="${_result}";

  return ${TRUE};
}

# fun: forEachAssociativeArrayEntryDo arrayName callback
# api: public
# txt: Calls a given function for each entry found in given associative array.
# opt: arrayName: The name of the associative array variable.
# opt: callback: The name of the callback function.
# txt: Returns 0/TRUE always.
# use: function process_code() {
# use:   echo "Code: ${1}, description: ${2}";
# use: }
# use: ...
# use: forEachAssociativeArrayEntryDo "CODE_DESCRIPTION_MAPPING" "process_code";
function forEachAssociativeArrayEntryDo() {
  local _arrayName="${1}";
  checkNotEmpty arrayName "${_arrayName}" 1;
  local _callback="${2}";
  checkFunctionPresent callback "${_callback}" 2;

  local _oldIFS="${IFS}";

  declare -n _directArray="${_arrayName}";

  IFS="${DWIFS}";
  local _key;
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    ${_callback} "${_key}" "${_directArray[${_key}]}";
  done
  IFS="${_oldIFS}";
}

# fun: isArrayEmpty arrayName
# api: public
# txt: Checks whether given array is empty.
# opt: arrayName: The name of the array.
# txt: Returns 0/TRUE if the array is empty; 1/FALSE otherwise.
# use: if isArrayEmpty array; then
# use:   echo "array is empty";
# use: fi
function isArrayEmpty() {
  local _arrayName="${1}";
  local -i _rescode;

  if isEmpty "${_arrayName}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: retrieveAssociativeArrayKeys arrayName
# api: public
# txt: Extracts the keys of given associative array.
# opt: arrayName: The array name.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the list of the keys, wrapped in double quotes.
# use: myMapping=([foo]=bar [with spaces]="with spaces");
# use: retrieveAssociativeArrayKeys myMapping;
# use: for key in ${RESULT}; do
# use:   ...;
# use: done
function retrieveAssociativeArrayKeys() {
  local _arrayName="${1}";
  checkNotEmpty arrayName "${_arrayName}" 1;
  local _result;
  local _oldIFS="${IFS}";

  declare -n _directArray="${_arrayName}";

  IFS="${DWIFS}";
  local _key;
  for _key in "${!_directArray[@]}"; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_result}"; then
      _result="${_result} ";
    fi
    _result="${_result}\"${_key}\"";
  done
  IFS="${_oldIFS}";

  export RESULT="${_result}";

  return ${TRUE};
}

# fun: nth nth array
# api: public
# txt: Retrieves the nth element of given array.
# opt: nth: The index.
# opt: arrayName: The destination array.
# txt: Returns 0/TRUE if the element could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the nth element.
# use: nth 0 myArray; echo "First element: ${RESULT}";
function nth() {
  local _nth="${1}";
  checkNumber nth "${_nth}" 1;
  local _arrayName="${2}";
  checkNotEmpty arrayName "${_arrayName}" 2;

  local _result;
  local -i _rescode=${FALSE};

  local -n _nthArray=${_arrayName};

  if isLessOrEqualTo ${_nth} ${#_nthArray[@]}; then
    _result="${_nthArray[${_nth}]}";
    _rescode=${TRUE};
    if isNotEmpty "${_result}"; then
      if removeSurrounding "${_result}" '"'; then
        _result="${RESULT}";
      fi
      if isNotEmpty "${_result}"; then
        if removeSuffix "${_result}" " *"; then
          _result="${RESULT}";
        fi
      fi
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: modify_array value separator regex replacement
# api: public
# txt: Replaces the item of given value matching a regex, with a replacement.
# opt: value: The value to process.
# opt: separator: The separator.
# opt: regex: The regular expression.
# opt: replacement: The value for the item matching given regex.
# txt: Returns 0/TRUE if the value was processed successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the updated value.
# use: if modify_pythonpath "${PYTHONPATH}" ":" ".*-testcontainers-python/.*" "/tmp/testcontainers-python"; then
# use:    export PYTHONPATH="${RESULT}";
# use: fi
function modify_array() {
  local _value="${1}";
  checkNotEmpty value "${_value}" 1;
  local _separator="${2}";
  checkNotEmpty separator "${_separator}" 2;
  local _regex="${3}";
  checkNotEmpty regex "${_regex}" 3;
  local _replacement="${4}";
  checkNotEmpty replacement "${_replacement}" 4;

  local -i _rescode=${FALSE};
  local _result;
  local _array=();

  IFS="${_separator}" read -r -a _array <<< "${_value}"

  local _item;
  for _index in "${!_array[@]}"; do
    if [[ "${_array[_index]}" =~ ${_regex} ]]; then
      _array[_index]="${_replacement}";
      _rescode=${TRUE};
    fi
  done

  if isTrue ${_rescode}; then
    _result="$(printf "%s${_separator}" "${_array[@]}")";
    _result="${_result%"${_separator}"}";
    export RESULT="${_result}"
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
