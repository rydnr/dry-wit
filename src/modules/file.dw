# mod: file
# api: public
# txt: Functions dealing with files.

# fun: FILE.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: FILE.getModuleName; echo "Module: ${RESULT}";
function FILE.getModuleName() {
  export RESULT="FILE"
  return ${TRUE}
}

# fun: addFileToCleanup file
# api: public
# txt: Annotates a file to be removed.
# opt: file: The file to delete.
# txt: Returns 0/TRUE always.
# use: addFileToCleanup "/tmp/my-log.txt";
function addFileToCleanup() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  FILE.getCleanupFilesVariableName
  local -n _cleanupFiles=${RESULT}

  _cleanupFiles[${#_cleanupFiles[@]}]="${_file}"
}

# fun: createTempFile ext?
# api: public
# txt: Creates a new temporary file.
# opt: ext: The extension. Optional.
# txt: Returns 0/TRUE if the file gets created successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the name of the temporary file.
# use: if createTempFile; then
# use:   echo "Temp file: ${RESULT}";
# use: fi
function createTempFile() {
  local _ext="${1}"
  local -i _rescode

  local _result

  if createTempFileNoCleanup "${_ext}"; then
    _result="${RESULT}"
    addFileToCleanup "${_result}"
    _rescode=${TRUE}
    export RESULT="${_result}"
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: folderAllowsExec folder
# api: public
# txt: Checks if given folder allows executing files.
# opt: folder: The folder to check.
# txt: Returns 0/TRUE in such case; 1/FALSE otherwise.
# use: if folderAllowsExec /tmp; then
# use:   echo "/tmp does not allow executing files";
# use: fi
function folderAllowsExec() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1

  local _file="${_folder}/.check.sh.$$"

  cat <<EOF >"${_file}"
#!/usr/bin/env bash

echo -n "";
EOF
  chmod +x "${_file}"
  "${_file}" 2>/dev/null
  local -i _rescode=$?

  rm -f "${_file}"

  return ${_rescode}
}

# fun: createTempFileNoCleanup ext?
# api: public
# txt: Creates a new temporary file, without managing its cleanup.
# opt: ext: The extension. Optional.
# txt: Returns 0/TRUE if the file gets created successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the name of the temporary file.
# use: if createTempFileNoCleanup .txt; then echo "Temp file: ${RESULT}"; fi
function createTempFileNoCleanup() {
  local _ext="${1}"
  local -i _rescode=${FALSE}
  local -i _execAllowed=${FALSE}

  local _dirname="$(dirname '${_scriptName}')"
  if areEqual "${_dirname#\.\.}" "${_dirname}"; then
    _dirname="$PWD/${_dirname#\.}"
  else
    _dirname="$PWD/../${_dirname#\.\.}"
  fi

  if folderAllowsExec "${_dirname}"; then
    _execAllowed=${TRUE}
  else
    _dirname="$(dirname $(mktemp -u))"
    if folderAllowsExec "${_dirname}"; then
      _execAllowed=${TRUE}
    else
      _dirname="${PWD}"
    fi
  fi

  DW.getScriptName
  local _scriptName="${RESULT}"
  local _prefix="$(echo \"${_scriptName}\" | awk -F"/" '{print $NF;}' | sed 's/^"//g' | sed 's/"$//g')"

  if isTrue ${_execAllowed}; then
    FILE.mktempFile "${_dirname}" ".${_prefix}.XXXXXXXXXX${_ext}"
    _rescode=$?
  else
    FILE.mktempFile ".${_prefix}.XXXXXXXXXX${_ext}"
    _rescode=$?
  fi

  return ${_rescode}
}

# fun: createTempFolder parent? prefix?
# api: public
# txt: Creates a temporary folder.
# opt: parent: The parent folder. Optional.
# opt: prefix: The folder name prefix. Optional.
# txt: Returns 0/TRUE if the folder gets created successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the new folder.
# use: if createTempFolder; then
# use:   echo "New folder: ${RESULT}";
# use: fi
function createTempFolder() {
  local _dirname="${1}"
  local _prefix="${2}"

  local _result

  DW.getScriptName
  local _scriptName="${RESULT}"

  if isEmpty "${_dirname}"; then
    _dirname="$(dirname ${_scriptName})"
    if [ "${_dirname#\.\.}" == "${_dirname}" ]; then
      _dirname="${PWD}/${_dirname#\.}"
    else
      _dirname="${PWD}/../${_dirname#\.\.}"
    fi
  fi

  if isEmpty "${_prefix}"; then
    _prefix="${_scriptName}"
  fi
  _prefix="$(echo "${_prefix}" | awk -F"/" '{print $NF;}')"

  FILE.mktempFolder "${_dirname}" ".${_prefix}.XXXXXX"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    _result="${RESULT}"
  else
    FILE.mktempFolder "${PWD}" ".${_prefix}.XXXXXX"
    _rescode=$?
    if isTrue ${_rescode}; then
      _result="${RESULT}"
    fi
  fi

  if isTrue ${_rescode}; then
    addFileToCleanup "${_result}"
    export RESULT="${_result}"
  else
    export RESULT=""
  fi

  return ${_rescode}
}

# fun: FILE.mktempFile baseFolder format
# api: private
# txt: Runs mktemp variants in Linux and MacOSX, for creating a temporary file.
# opt: baseFolder: The base folder.
# opt: format: The file name format.
# txt: Returns 0/TRUE if the file is created correctly; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the file name.
# use: if FILE.mktempFile /tmp .removeme.XXXX; then
# use:   ...;
# use: fi
function FILE.mktempFile() {
  local _baseFolder="${1}"
  checkNotEmpty baseFolder "${_baseFolder}" 1
  local _format="${2}"
  checkNotEmpty format "${_format}" 2

  local -i _rescode
  local _result

  if isMacOSX; then
    _result="$(TMPDIR="${_baseFolder}" mktemp -t ${_format} || echo "ERROR.$$")"
  else
    _result="$(mktemp -p ${_baseFolder} -t ${_format} || echo "ERROR.$$")"
  fi

  if isNotEmpty "${_result}" && contains "${_result}" "ERROR.$$"; then
    _rescode=${FALSE}
  else
    _rescode=${TRUE}
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: FILE.mktempFolder baseFolder format
# api: private
# txt: Runs mktemp variants in Linux and MacOSX, for creating a temporary folder.
# opt: baseFolder: The base folder.
# opt: format: The file name format.
# txt: Returns 0/TRUE if the file is created correctly; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the file name.
# use: if FILE.mktempFolder /tmp .removeme.XXXX; then
# use:   ...;
# use: fi
function FILE.mktempFolder() {
  local _baseFolder="${1}"
  checkNotEmpty baseFolder "${_baseFolder}" 1
  local _format="${2}"
  checkNotEmpty format "${_format}" 2
  local -i _rescode
  local _result

  if isMacOSX; then
    _result="$(TMPDIR="${_baseFolder}" mktemp -d -t ${_format})"
    _rescode=$?
  else
    _result="$(mktemp -p ${_baseFolder} -d -t ${_format})"
    _rescode=$?
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: fileExists file
# api: public
# txt: Checks if given file exists.
# opt: file: The file to check.
# txt: Returns 0/TRUE if the file exists; 1/FALSE otherwise.
# use: if fileExists "/tmp/test.txt"; then
# use:   ...;
# use: fi
function fileExists() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  if [[ -e ${_file} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: folderExists folder
# api: public
# txt: Checks if given folder exists.
# opt: folder: The folder to check.
# txt: Returns 0/TRUE if the folder exists; 1/FALSE otherwise.
# use: if folderExists "/tmp"; then
# use:   ...;
# use: fi
function folderExists() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1

  if [[ -d ${_folder} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: fileIsNotEmpty file
# api: public
# txt: Checks if given file is not empty.
# opt: file: The file to check.
# txt: Returns 0/TRUE if the file is not empty; 1/FALSE otherwise.
# use: if fileIsNotEmpty "/tmp/test.txt"; then
# use:   ...;
# use: fi
function fileIsNotEmpty() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  if [[ -s ${_file} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: fileIsReadable file
# api: public
# txt: Checks if given file is readable.
# opt: file: The file to check.
# txt: Returns 0/TRUE if the file is readable; 1/FALSE otherwise.
# use: if fileIsReadable "/tmp/test.txt"; then
# use:   ...;
# use: fi
function fileIsReadable() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  if [[ -r ${_file} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: fileIsRegularFile file
# api: public
# txt: Checks if given file is a regular file.
# opt: file: The file to check.
# txt: Returns 0/TRUE if the file is a regular file; 1/FALSE otherwise.
# use: if fileIsRegularFile "/tmp/test.txt"; then
# use:   ...;
# use: fi
function fileIsRegularFile() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  if [[ -f ${_file} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: fileIsWritable file
# api: public
# txt: Checks if given file is writable.
# opt: file: The file to check.
# txt: Returns 0/TRUE if the file is writable; 1/FALSE otherwise.
# use: if fileIsWritable "/tmp/test.txt"; then
# use:   ...;
# use: fi
function fileIsWritable() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  if [[ -w ${_file} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: folderIsWritable folder
# api: public
# txt: Checks if given folder is writable.
# opt: folder: The folder to check.
# txt: Returns 0/TRUE if the folder is writable; 1/FALSE otherwise.
# use: if folderIsWritable "/tmp"; then
# use:   ...;
# use: fi
function folderIsWritable() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1

  if [[ -w ${_folder} ]]; then
    return ${TRUE}
  else
    return ${FALSE}
  fi
}

# fun: findFolderDistance folderA folderB
# api: public
# txt: Finds the distance between two folders.
# opt: folderA: The first folder.
# opt: folderB: The second folder.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the distance.
# use: findFolderDistance "/home/myuser/a/b/c" "/home/myuser/a/b/d/e";
function findFolderDistance() {
  local _pathA="$1"
  checkNotEmpty folderA "${_pathA}" 1
  local _pathB="$2"
  checkNotEmpty folderB "${_pathB}" 2
  local -i _result=-1

  local _maxA=$(echo "${_pathA}" | awk -F"/" '{print NF;}')
  local _maxB=$(echo "${_pathB}" | awk -F"/" '{print NF;}')
  local _max=$((_maxA))
  if [ $((_max)) -lt $((_maxB)) ]; then
    _max=$((_maxB))
  fi

  local _index=$((_max))
  local _indexA=$((_maxA))
  local _indexB=$((_maxB))
  local _auxA
  local _auxB

  while [ $((_index)) -gt 0 ]; do
    _indexA=$((_maxA - _max + _index))
    _indexB=$((_maxB - _max + _index))
    if [ $((_indexA)) -eq 0 ] ||
      [ $((_indexB)) -eq 0 ]; then
      result=$((_max - _index))
      break
    fi
    _auxA=$(echo "${_pathA}" | awk -F"/" -vindx=${_indexA} '{printf("%s", $indx);}')
    _auxB=$(echo "${_pathB}" | awk -F"/" -vindx=${_indexB} '{printf("%s", $indx);}')
    _index=$((_index - 1))
    if [ "${_auxA}" != "${_auxB}" ]; then
      _result=${TRUE}
      break
    fi
  done

  #  if [ $((_result)) -ge 0 ]; then
  #    _result=$((_max-result));
  #  else
  #    _result=${TRUE};
  #  fi

  export RESULT="${_result}"
}

# fun: findGreatestCommonParentFolder folderA folderB
# api: public
# txt: Finds the greatest common parent folder
# opt: folderA: The first folder.
# opt: folderB: The second folder.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the parent folder.
# use: findGreatestCommonParentFolder ${HOME}/a/b/c ${HOME}/a/b/d/e;
function findGreatestCommonParentFolder() {
  local _pathA="$1"
  checkNotEmpty folderA "${_pathA}" 1
  local _pathB="$2"
  checkNotEmpty folderB "${_pathB}" 2
  local _result=""

  local _maxA=$(echo "${_pathA}" | awk -F"/" '{print NF;}')
  local _maxB=$(echo "${_pathB}" | awk -F"/" '{print NF;}')
  local _max=$((_maxA))
  if [ $((_max)) -lt $((_maxB)) ]; then
    _max=$((_maxB))
  fi

  local _index=1
  local _auxA
  local _auxB

  while [ $((_index)) -le $((_max)) ]; do
    _auxA=$(echo "${_pathA}" | awk -F"/" -vindx=${_index} '{printf("%s", $indx);}')
    _auxB=$(echo "${_pathB}" | awk -F"/" -vindx=${_index} '{printf("%s", $indx);}')
    _index=$((_index + 1))
    if [ "${_auxA}" == "${_auxB}" ]; then
      _result="${_result}/${_auxA}"
    else
      break
    fi
  done

  _result=$(echo "${_result}" | sed 's ^/  g')

  export RESULT="${_result}"
}

# fun: findInPath file
# api: public
# txt: Finds a given file within a PATH variable.
# opt: file: The file name to look for.
# txt: Prints the file path via (stdin).
# use: local path="$(findInPath myFile)";
function findInPath() {
  checkNotEmpty file "${1}" 1
  local _result=""
  local _paths="$(echo \"$PATH:.\" | awk -F":" '{for(i=1;i<=NF;i++) print $i;}')"
  local _path

  local _oldIFS="${IFS}"

  IFS="${DWIFS}"
  local _path
  for _path in $_paths; do
    IFS="${_oldIFS}"
    if [ -f "${_path}/$1" ]; then
      _result="${_path}/$1"
      break
    fi
  done
  IFS="${_oldIFS}"

  echo ${_result}
}

# fun: findRelativePathBetweenFolders folderA folderB
# api: public
# txt: Given two paths, A and B, finds the shortest way to reach B from A.
# opt: folderA: The first folder.
# opt: folderB: The second folder.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the relative path.
# use: findRelativePathBetweenFolders ${HOME}/a/b/c ${HOME}/a/d/e;
function findRelativePathBetweenFolders() {
  # Given two paths, A and B, find the shortest way
  # to reach B from A.
  # For example, if A is /tmp/test and B is /tmp/my/private/temp,
  # the shortest path is ../my/private/temp.
  # The algorith is as follows:
  # 1) Find the greatest common parent to A and B -> parent
  # 2) Remove 'parent' from A and B -> A* and B*
  # 3) Find out the distance from A to A* -> d
  # 4) Replace the greatest 'd' parent folders with '..' in A -> P*
  # 5) Result=P*/B*
  local _pathA="$1"
  checkNotEmpty folderA "${_pathA}" 1
  local _pathB="$2"
  checkNotEmpty folderB "${_pathB}" 2
  local _pathBb
  local _d
  local _p
  local result

  findGreatestCommonParentFolder "${_pathA}" "${_pathB}"
  local _parent="${RESULT}"

  local _pathAb="${_pathA#${_parent}}"
  _pathAb="${_pathAb#/}"
  local _pathBb="${_pathB#${_parent}}"
  _pathBb="${_pathBb#/}"

  findFolderDistance "${_pathA}" "${_pathAb}"
  local _d="${RESULT}"

  replaceNLeftmostTokens "${_pathA}" ".." ${_d} "/"
  local _p="${RESULT}"
  local _aux=$(echo ${_pathA} | awk -F"/" '{print NF;};')
  replaceNRightmostTokens "${_p}" "" $((_aux - _d - 1)) "/"
  _p="${RESULT}"

  local _result="${_p}/${_pathBb}"

  export RESULT="${_result}"
}

# fun: isExecutable fileOrFolder
# api: public
# txt: Checks whether given file or folder are executable.
# opt: fileOrFolder: The file or folder to check.
# txt: Returns 0/TRUE if the folder can be visited; 1/FALSE otherwise.
# use: if isExecutable "/tmp"; then
# use:   cd /tmp;
# use: fi
function isExecutable() {
  local _fileOrFolder="${1}"
  checkNotEmpty fileOrFolder "${_fileOrFolder}" 1

  local -i _rescode

  if fileExists "${_fileOrFolder}" && [[ -x "${_fileOrFolder}" ]]; then
    _rescode=${TRUE}
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: folderExistsAndIsNotASymlink folder
# api: public
# txt: Checks whether given folder exists and it's not a symbolic link.
# opt: folder: The folder to check.
# txt: Returns 0/TRUE if the folder exists; 1/FALSE otherwise.
# use: if folderExistsAndIsNotASymlink "/tmp"; then
# use:   ...;
# use: fi
function folderExistsAndIsNotASymlink() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1

  local -i _rescode

  if folderExists "${_folder}"; then
    if isSymlink "${_folder}"; then
      _rescode=${FALSE}
    else
      _rescode=${TRUE}
    fi
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: isMacOSX
# api: public
# txt: Checks if the system is a MacOSX.
# txt: Returns 0/TRUE if the system is MacOSX; 1/FALSE otherwise.
# use: if isMacOSX; then
# use:   echo "I'm running on a MacOSX";
# use: fi
function isMacOSX() {
  local -i _rescode

  if [ "$(uname -s)" == "Darwin" ]; then
    _rescode=${TRUE}
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: isSymlink path
# api: public
# txt: Checks whether given path is a symlink.
# opt: path: The path to check.
# txt: Returns 0/TRUE if the path is a symlink; 1/FALSE otherwise.
# use: if isSymlink "/tmp"; then
# use:   ...;
# use: fi
function isSymlink() {
  local _path="${1}"
  checkNotEmpty path "${_path}" 1

  local -i _rescode

  if [ -L "${_path}" ]; then
    _rescode=${TRUE}
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: readConfFile file
# api: public
# txt: Reads given configuration file.
# opt: file: The config file.
# txt: Returns 0/TRUE if the file is read successfully; 1/FALSE otherwise.
# use: if readConfFile "/tmp/app.conf"; then
# use:   echo "/tmp/app.conf read successfully";
# use: fi
function readConfFile() {
  local _confFile="${1}"
  checkNotEmpty file "${_confFile}" 1

  local -i _rescode=${TRUE}

  if [ ! -e "${_confFile}" ]; then
    _rescode=${FALSE}
  fi

  if isTrue ${_rescode}; then
    local _actualConfFile="${_confFile}"

    createTempFile
    _rescode=$?
    _actualConfFile="${RESULT}"

    if isTrue ${_rescode}; then
      grep -v '^#' "${_confFile}" | sed 's ${\(.*\)} _dollar{\1}_ g' |
        sed 's ^\(.*\)=\(.*\) echo\ -n\ \1\ |\ tr\ \[:lower:\]\ \[:upper:]\;\ echo\ -n\ =\;\ echo\ \2 g' |
        sh |
        sed 's _dollar{\(.*\)}_ ${\1} g' |
        sed 's_^\(.*\)=\(.*\)$_\1=\2; logTrace \1=\${\1};_ g' |
        sed 's_^_export _g' >"${_actualConfFile}"

      source "${_actualConfFile}"
    fi
  fi

  return ${_rescode}
}

# fun: readLink param*
# api: public
# txt: Runs readlink (differs in Linux and in MacOSX).
# opt: param: The readlink parameters.
# txt: Returns the result code of readlink.
# txt: The variable RESULT contains the output of readlink.
# use: if readLink -f "/bin/bash"; then
# use:   echo "readlink result: ${RESULT}"
# use: fi
function readLink() {
  checkNotEmpty param "${1}" 1

  local -i _rescode
  local _result

  if isMacOSX; then
    _result="$(greadlink $@)"
    _rescode=$?
  else
    _result="$(readlink $@)"
    _rescode=$?
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: removeExtension fileName
# api: public
# txt: Removes the extension from given file name.
# opt: fileName: The file name.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the file name, without the extension.
# use: removeExtension "myfile.sh" # -> RESULT="myfile";
function removeExtension() {
  local _file="${1}"
  checkNotEmpty fileName "${_file}" 1

  local _result="$(basename ${_file}$)"
  _result="${_result%.*}"

  export RESULT="${_result}"

  return ${TRUE}
}

# fun: retrieveAbsolutePath relativePath
# api: public
# txt: Retrieves the absolute path of given argument.
# opt: relativePath: The relative path.
# txt: Returns 0/TRUE if the file was found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the absolute path.
# use: if retrieveAbsolutePath './myfile'; then
# use:   echo "absolute path: ${RESULT}";
# use: fi
function retrieveAbsolutePath() {
  local _relativePath="${1}"
  checkNotEmpty relativePath "${_relativePath}" 1

  readLink -f "${_relativePath}"

  return $?
}

# fun: retrieveFreeDiskSpaceUnderFolder folder
# api: public
# txt: Retrieves the disk space available in the filesystem containing given folder. Prints the available space in bytes.
# opt: folder: The folder.
# txt: Returns 0/TRUE if the space could be calculated; 1/FALSE otherwise.
# use: if retrieveFreeDiskSpaceUnderFolder "/tmp"; then
# use:   echo "/tmp -> ${RESULT}";
# use: fi
function retrieveFreeDiskSpaceUnderFolder() {
  local _folder="$1"
  checkNotEmpty folder "${_folder}" 1

  local _result

  local -i _rescode=${FALSE}
  local _aux="${_folder}"

  if [ -d "${_folder}" ]; then
    while isNotEmpty "${_aux}" -a areNotEqual "${_aux}" "/" &&
      ! mountpoint -q "${_aux}"; do
      _aux="${_aux%/*}"
    done

    mountpoint -q "${_aux}"
    _rescode=$?

    if isTrue ${_rescode}; then
      _result="$(df | grep " ${_aux}$" | awk '{print $4;}')"
      _rescode=$?
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}"
  fi

  return ${_rescode}
}

# fun: sourceFileIfExists file
# api: public
# txt: Sources given file, if it exists.
# opt: file: The file to source.
# txt: Returns 0/TRUE if the file is sourced; 1/FALSE otherwise.
# use: sourceFileIfExists "/tmp/my-env";
function sourceFileIfExists() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1

  local -i _rescode=${FALSE}

  if fileExists "${_file}"; then
    local _filePath="$(realpath "${_file}")"
    logTrace -n "Reading ${_filePath}"
    _rescode=${TRUE}
    source "${_filePath}"
    logTraceResult SUCCESS "done"
  else
    logTrace -n "Reading ${_file}"
    logTraceResult SUCCESS "not found"
  fi

  return ${_rescode}
}

# fun: uncompress file outputFolder
# api: public
# txt: Uncompresses given file to a concrete folder.
# opt: file: The file.
# opt: outputFolder: The output folder.
# txt: Returns 0/TRUE if the file is uncompressed successfully; 1/FALSE if the format of the file is invalid; and 2 if there's some other error when uncompressing the file.
# use: uncompress "my.zip" "/tmp";
function uncompress() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _destination="${2}"
  checkNotEmpty outputFolder "${_destination}" 2

  local -i _rescode=${TRUE}

  createTempFile
  local _errorOutput="${RESULT}"

  local _flags

  # First, check whether the bundle is compressed bzip2 format.
  if file "${_file}" | cut -d ":" -f 2 | grep bzip2 >/dev/null 2>&1; then
    _flags="xfj"
    # Second try: check whether the bundle is compressed gzip format.
  elif file "${_file}" | cut -d ":" -f 2 | grep gzip /dev/null 2>&1; then
    _flags="xfz"
    # Otherwise, it can also be a standard, uncompressed tar.
  elif file "${_file}" | cut -d ":" -f 2 | grep tar /dev/null 2>&1; then
    _flags="xf"
  else
    _rescode=${FALSE}
  fi

  if isTrue ${_rescode}; then
    logDebug -n "Uncompressing ${_file}"
    tar ${_flags} "${_file}" -C "${_destination}" >"${_errorOutput}" 2>&1
    if isTrue $?; then
      logDebugResult SUCCESS "done"
    else
      logDebugResult FAILURE "Failed"
      logDebugFile "${_errorOutput}"
      _rescode=2
    fi
  fi

  return ${_rescode}
}

# fun: compress file sourceFilesOrFolders+
# api: public
# txt: Compresses given folder into a concrete file. If the extension is unknown, it creates an uncompressed tar file.
# opt: file: The file.
# opt: sourceFilesOrFolders: The source files or folders.
# txt: Returns 0/TRUE if the file gets created successfully; 1/FALSE otherwise.
# use: compress "my.gz" "/tmp";
function compress() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  shift
  local _sourceFilesOrFolders="${@}"
  checkNotEmpty sourceFilesOrFolders "${_sourceFilesOrFolders}" 2

  local -i _rescode=${FALSE}

  createTempFile
  local _errorOutput="${RESULT}"

  local _flags

  # First, check whether we should compress using the bzip2 format.
  if endsWith "${_file}" ".bz2"; then
    _flags="cfj"
    # Second try, check whether we should compress using the gzip format.
  elif endsWith "${_file}" ".gz"; then
    _flags="cfz"
    # Otherwise, it can also be a standard, uncompressed tar.
  else
    _flags="cf"
  fi

  logDebug -n "Creating ${_file} from ${_sourceFilesOrFolders}"
  tar ${_flags} "${_file}" "${_sourceFilesOrFolders}" >"${_errorOutput}" 2>&1
  _rescode=$?
  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "done"
  else
    logDebugResult FAILURE "Failed"
    logDebugFile "${_errorOutput}"
  fi

  return ${_rescode}
}

# fun: replaceVariablesInFile file output variables+
# api: public
# txt: Processes the variables in given file. It uses enviroment variables as well as extra variables.
# opt: file: The input file.
# opt: output: The output file.
# opt: variables+: name=value pairs.
# txt: Returns 0/TRUE if the file was processed successfully; 1/FALSE otherwise.
# use: if replaceVariablesInFile "my.template" "output" "name=John" "age=23"; then
# use:   ...
# use: fi
function replaceVariablesInFile() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _output="${2}"
  checkNotEmpty output "${_output}" 2
  shift
  shift
  local _variables="${@}"
  checkNotEmpty variables "${_variables}" 3

  local -i _rescode=${TRUE}

  local _env
  local _envsubstDecl

  keyValueSplit "${_variables}"
  local _splittedVariables="${RESULT}"

  local _oldIFS="${IFS}"
  IFS=$'\n'
  local _pair
  for _pair in ${_splittedVariables}; do
    IFS="${_oldIFS}"
    local _key
    if extractKeyInPair "${_pair}"; then
      _key="${RESULT}"
    else
      _rescode=${FALSE}
      break
    fi

    local _value
    if extractValueInPair "${_pair}"; then
      _value="${RESULT}"
      if isNotEmpty "${_value}"; then
        if removeSurrounding "${_value}" '"'; then
          _value="${RESULT}"
        fi
        if replaceAll "${_value}" '"' '\"'; then
          _value="${RESULT}"
        fi
      fi
    else
      _rescode=${FALSE}
      break
    fi

    if isNotEmpty "${_env}"; then
      _env="${_env} "
    fi
    _env="${_env}${_key}=\"${_value}\""
    if isNotEmpty "${_envsubstDecl}"; then
      _envsubstDecl="${_envsubstDecl} "
    fi
    _envsubstDecl=$(
      echo -n "${_envsubstDecl}$"
      echo -n "{${_key}}"
    )
  done
  IFS="${_oldIFS}"

  if isTrue ${_rescode}; then
    echo "${_env} envsubst '${_envsubstDecl}' < ${_file}" | sh >"${_output}"
    _rescode=$?
  fi

  return ${_rescode}
}

# fun: changeFilePermissions file permissions
# api: public
# txt: Changes the permissions of given file.
# opt: file: The file to update.
# opt: permissions: The permissions.
# txt: Returns 0/TRUE if the permissions were updated; 1/FALSE otherwise.
# use: if changeFilePermissions /tmp/my-file 0700; then
# use:   echo "Permissions changed";
# use: fi
function changeFilePermissions() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _permissions="${2}"
  checkNotEmpty permissions "${_permissions}" 2

  chmod ${_permissions} ${_file} >/dev/null 2>&1
}

# fun: getOwnerOfFileOrFolder fileOrFolder
# api: public
# txt: Retrieves the name of the owner of given file or folder.
# opt: fileOrFolder: The file or folder.
# txt: Retrieves 0/TRUE if the owner could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the name of the owner.
# use: if getOwnerOfFileOrFolder /tmp; then
# use:   echo "owner of /tmp: ${RESULT}";
# use: fi
function getOwnerOfFileOrFolder() {
  local _fileOrFolder="${1}"
  checkNotEmpty fileOrFolder "${_fileOrFolder}" 1

  local -i _rescode

  if fileExists "${_fileOrFolder}" || folderExists "${_fileOrFolder}"; then
    local _output
    _output="$(ls -ld "${_fileOrFolder}" | awk '{print $4;}')"
    _rescode=$?
    if isTrue ${_rescode}; then
      export RESULT="${_output}"
    fi
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: getOwnerIdOfFileOrFolder fileOrFolder
# api: public
# txt: Retrieves the id of the owner of given file or folder.
# opt: fileOrFolder: The file or folder.
# txt: Retrieves 0/TRUE if the owner could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the owner.
# use: if getOwnerIdOfFileOrFolder /tmp; then
# use:   echo "owner id of /tmp: ${RESULT}";
# use: fi
function getOwnerIdOfFileOrFolder() {
  local _fileOrFolder="${1}"
  checkNotEmpty fileOrFolder "${_fileOrFolder}" 1

  local -i _rescode

  if fileExists "${_fileOrFolder}" || folderExists "${_fileOrFolder}"; then
    local _output
    _output="$(
      grep -e '^$(ls -ld "${_fileOrFolder}" | awk '{print $4
      }'):' /etc/passwd | cut -d':' -f 3
    )"
    _rescode=$?
    if isTrue ${_rescode}; then
      export RESULT="${_output}"
    fi
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: getGroupOfFileOrFolder fileOrFolder
# api: public
# txt: Retrieves the name of the group of given file or folder.
# opt: fileOrFolder: The file or folder.
# txt: Retrieves 0/TRUE if the group could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the name of the group.
# use: if getGroupOfFileOrFolder /tmp; then
# use:   echo "group of /tmp: ${RESULT}";
# use: fi
function getGroupOfFileOrFolder() {
  local _fileOrFolder="${1}"
  checkNotEmpty fileOrFolder "${_fileOrFolder}" 1

  local -i _rescode

  if fileExists "${_fileOrFolder}" || folderExists "${_fileOrFolder}"; then
    local _output
    _output="$(ls -ld "${_fileOrFolder}" | awk '{print $5;}')"
    _rescode=$?
    if isTrue ${_rescode}; then
      export RESULT="${_output}"
    fi
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: getGroupIdOfFileOrFolder fileOrFolder
# api: public
# txt: Retrieves the id of the group of given file or folder.
# opt: fileOrFolder: The file or folder.
# txt: Retrieves 0/TRUE if the group could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the id of the group.
# use: if getGroupIdOfFileOrFolder /tmp; then
# use:   echo "group id of /tmp: ${RESULT}";
# use: fi
function getGroupIdOfFileOrFolder() {
  local _fileOrFolder="${1}"
  checkNotEmpty fileOrFolder "${_fileOrFolder}" 1

  local -i _rescode

  if fileExists "${_fileOrFolder}" || folderExists "${_fileOrFolder}"; then
    local _output
    _output="$(
      grep -e '^$(ls -ld "${_fileOrFolder}" | awk '{print $5
      }'):' /etc/group | cut -d':' -f 3
    )"
    _rescode=$?
    if isTrue ${_rescode}; then
      export RESULT="${_output}"
    fi
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: changeFolderPermissionsRecursively folder permissions
# api: public
# txt: Changes the permissions of given folder, recursively.
# opt: folder: The folder to update.
# opt: permissions: The permissions.
# txt: Returns 0/TRUE if the permissions were updated; 1/FALSE otherwise.
# use: if changeFolderPermissionsRecursively /tmp/ 0700; then echo "Permissions changed"; fi
function changeFolderPermissionsRecursively() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1
  local _permissions="${2}"
  checkNotEmpty permissions "${_permissions}" 2

  chmod -R ${_permissions} ${_folder} >/dev/null 2>&1
}

# fun: changeOwnerOfFile file user group? ownership?
# api: public
# txt: Changes the ownership of given file.
# opt: file: The file to update.
# opt: user: The owner.
# opt: group: The group. Optional.
# opt: ownership: The ownership. Optional.
# txt: Returns 0/TRUE if the permissions were updated; 1/FALSE otherwise.
# use: if changeOwnerOfFile /tmp/my-file 0700; then
# use:   echo "Ownership changed";
# use: fi
function changeOwnerOfFile() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _user="${2}"
  checkNotEmpty user "${_user}" 2
  local _group="${3}"
  local _ownership="${_user}"

  if isNotEmpty "${_group}"; then
    _ownership="${_ownership}:${_group}"
  fi

  chown "${_ownership}" "${_file}" >/dev/null 2>&1
}

# fun: changeOwnerOfFolderRecursively dir user group?
# api: public
# txt: Changes the ownership of given folder and its contents.
# opt: dir: The folder to update.
# opt: user: The user.
# opt: group: The group. Optional.
# txt: Returns 0/TRUE if the owner information was updated; 1/FALSE otherwise.
# use: if changeOwnerOfFolderRecursively /tmp root wheel; then
# use:   echo "Ownership changed";
# use: fi
function changeOwnerOfFolderRecursively() {
  local _dir="${1}"
  checkNotEmpty dir "${_dir}" 1
  local _user="${2}"
  checkNotEmpty user "${_user}" 2
  local _group="${3}"
  local _ownership="${_user}"

  if isNotEmpty "${_group}"; then
    _ownership="${_ownership}:${_group}"
  fi

  chown -R "${_ownership}" "${_dir}" >/dev/null 2>&1
}

# fun: FILE.getCleanupFilesVariableName
# api: public
# txt: Retrieves the variable name containing the files to clean up.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the variable name.
# use: FILE.getCleanupFilesVariableName;
# use: local -n cleanupFiles=${RESULT};
function FILE.getCleanupFilesVariableName() {
  FILE.getModuleName
  DW.getGlobalVariableName "${RESULT}" CLEANUP_FILES
}

# fun: truncateFiles folder regex
# api: public
# txt: Truncates files under given folder matching given regex.
# txt: Returns 0/TRUE if the logs get truncated; 1/FALSE otherwise.
# use: if truncateFiles /var/log '*.log'; then
# use:   ...
# use: fi
function truncateFiles() {
  local _folder="${1}"
  checkNotEmpty folder "${_folder}" 1
  local _regex="${2}"
  checkNotEmpty regex "${_regex}" 2

  find "${_folder}" -type f -name "${_regex}" -exec bash -c 'echo > {}' \;
  local -i _rescode=$?

  return ${_rescode}
}

# fun: fileContains file text
# api: public
# txt: Checks whether a file contains given text.
# opt: file: The file.
# opt: text: The text.
# txt: Returns 0/TRUE if the file contains given text; 1/FALSE otherwise.
# use: if fileContains /etc/passwd ${USER}; then
# use:   echo "${USER} in /etc/passwd";
# use: fi
function fileContains() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _text="${2}"
  checkNotEmpty text "${_text}" 2

  local _output
  _output="$(grep --color=none "${_text}" "${_file}" 2>&1)"
  local -i _rescode=$?

  if isTrue ${_rescode}; then
    export RESULT="${_output}"
  else
    export ERROR="${_output}"
  fi

  return ${_rescode}
}

# fun: fileModifiedInLastXMinutes file minutes
# api: public
# txt: Checks if given file has been modified in the last X minutes.
# opt: file: The file.
# opt: minutes: The minutes.
# txt: Returns 0/TRUE if the file was last modified in the last X minutes; 1/FALSE otherwise.
# use: if fileModifiedInLastXMinutes "${file}" 3; then
# use:   echo "File ${file} modified in last 3 minutes";
# use: fi
function fileModifiedInLastXMinutes() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _minutes="${2}"
  checkNotEmpty minutes "${_minutes}" 2
  checkNumber minutes "${_minutes}" 2

  local -i _rescode

  if [ $(stat -c %Y "${_file}") -ge $(($(date +%s) - 60 * ${_minutes})) ]; then
    _rescode=${TRUE}
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: FILE.resetState
# api: private
# txt: Resets the state of the module.
# txt: Returns 0/TRUE always.
# use: FILE.resetState;
function FILE.resetState() {
  FILE.getModuleName
  # env: CLEANUP_FILES: The temporary files to cleanup.
  DW.declareGlobalArray "${RESULT}" CLEANUP_FILES
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
