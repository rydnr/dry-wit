# mod: error
# api: public
# txt: Functions related to declaring and using errors.

# fun: ERROR.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: ERROR.getModuleName; echo "Module: ${RESULT}";
function ERROR.getModuleName() {
  export RESULT="ERROR"
  return ${TRUE}
}

# fun: addError label message
# api: public
# txt: Annotates a new error.
# opt: label: The error label.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: addError INVALID_NAME "The name is not valid";
function addError() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1

  local _message="${2}"
  checkNotEmpty message "${_message}" 2

  normalizeUppercase "${_label}"
  local _normalizedLabel="${RESULT}"

  if isErrorUndefined "${_normalizedLabel}"; then
    appendErrorMessage "${_normalizedLabel}"
    ERROR.getModuleName
    DW.setGlobalString "${RESULT}" "${_normalizedLabel}" "${_message}"
  fi
}

# fun: appendErrorMessage error
# api: public
# txt: Appends a new error to __DW_ERROR_MESSAGES.
# opt: error: The error to add.
# txt: Returns 0/TRUE always.
# use: appendErrorMessage "item";
function appendErrorMessage() {
  local _error="${1}"
  checkNotEmpty error "${_error}" 1

  ERROR.getErrorMessagesVariableName
  local -n _errorMessages=${RESULT}
  _errorMessages[${#_errorMessages[@]}]="${_error}"
}

# fun: exitWithError label message
# api: public
# txt: Exits with an error.
# opt: label: The error label.
# opt: message: The error message.
# use: exitWithError UNKNOWN_OPTION "Unknown option";
function exitWithError() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1
  shift
  local _message="${*}"
  checkNotEmpty message "${_message}" 2

  if isErrorUndefined "${_label}"; then
    addError "${_label}" "${_message}"
  fi

  exitWithErrorCode "${_label}"
}

# fun: exitWithErrorCode label
# api: public
# txt: Exits with an error code associated with given error label.
# opt: label: The error label.
# use: exitWithErrorCode UNKNOWN_OPTION;
function exitWithErrorCode() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1
  shift

  if isLogLineOpen; then
    getLastLogLevel
    local _level="${RESULT:-INFO}"
    logResult "${_level}" FAILURE "aborted"
  fi

  command echo "${BASH_SOURCE[*]}"
  printErrorMessage "${_label}" "$@"
  local -i _rescode=$?
  cleanup

  exit ${_rescode}
}

# fun: isErrorDefined label
# api: public
# txt: Checks whether an error is defined.
# opt: label: The error label.
# txt: 0/TRUE if the error is defined; 1/FALSE otherwise.
# use: if isErrorDefined INVALID_NAME; then
# use:   echo "INVALID_NAME already defined";
# use: fi
function isErrorDefined() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1

  local -i _rescode

  ERROR.getErrorMessagesVariableName
  local -n _errorMessages=${RESULT}
  if isNotEmpty "${_errorMessages[@]}" && arrayContains "${_label}" "${_errorMessages[@]}"; then
    _rescode=${TRUE}
  else
    _rescode=${FALSE}
  fi

  return ${_rescode}
}

# fun: isErrorUndefined label
# api: public
# txt: Checks whether an error is undefined.
# opt: label: The error label.
# txt: Returns 0/TRUE if the error is undefined; 1/FALSE otherwise.
# use: if isErrorUndefined INVALID_NAME; then
# use:   addError INVALID_NAME "The name is not valid";
# use: fi
function isErrorUndefined() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1

  local -i _rescode

  if isErrorDefined "${_label}"; then
    _rescode=${FALSE}
  else
    _rescode=${TRUE}
  fi

  return ${_rescode}
}

# fun: printErrorMessage label
# api: public
# txt: Prints the error message for given label.
# opt: label: The error label.
# txt: Returns 0/TRUE if the error is found and gets printed; 1/FALSE otherwise.
# use: if printErrorMessage INVALID_OPTION; then
# use:   ...;
# use: fi
function printErrorMessage() {
  local _label="${1}"
  checkNotEmpty label "${_label}" 1
  shift

  local -i _rescode=${TRUE}

  local _message=""

  #  set +o nounset  # allow unset variables

  ERROR.getBuiltInErrorsVariableName
  local -n _builtinErrors=${RESULT}

  local _oldIFS="${IFS}"
  IFS="${DWIFS}"
  local _builtinError
  for _builtinError in "${_builtinErrors[@]}"; do
    IFS="${_oldIFS}"
    _rescode=$((_rescode + 1))
    if areEqual "${_builtinError}" "${_label}"; then
      _message="${_builtinError}"
      break
    fi
  done
  IFS="${_oldIFS}"

  # TODO set -o nounset  # disallow unset variables

  ERROR.getErrorMessagesVariableName
  local -n _errorMessages=${RESULT}

  if isEmpty "${_message}"; then
    # IFS issue
    #    rescode=${TRUE};
    IFS="${DWIFS}"
    local _errorMessage
    for _errorMessage in "${_errorMessages[@]}"; do
      IFS="${_oldIFS}"
      _rescode=$((_rescode + 1))
      if areEqual "${_errorMessage}" "${_label}"; then
        _message="${_errorMessage}"
        break
      fi
    done
  fi
  IFS="${_oldIFS}"

  if isEmpty "${_message}"; then
    _error="Error ${_label}, but no error message defined. Fix this script"
    _rescode=-1
  else
    ERROR.getModuleName
    DW.getGlobalString "${RESULT}" "${_label}"
    _error="${RESULT}"
  fi

  if [ ${#@} -gt 0 ]; then
    if [ ${#@} -gt 1 ]; then
      _error="$(
        cat <<EOF
${_error}
$@
EOF
      )"
    else
      _error="${_error} $*"
    fi
  fi

  local -i _mainFound=${FALSE}
  local _callStack=""

  IFS="${DWIFS}"
  local -i _callStackIndex
  local _bashFlags=$-
  set +u
  for _callStackIndex in $(seq 3 1 ${#FUNCNAME[@]}); do
    IFS="${_oldIFS}"
    if isNotEmpty "${FUNCNAME[${_callStackIndex}]}"; then
      if isFalse ${_mainFound}; then
        if startsWith "${FUNCNAME[${_callStackIndex}]}" "CHECK." ||
          startsWith "${FUNCNAME[${_callStackIndex}]}" "DRYWIT."; then
          #           || startsWith "${FUNCNAME[${_callStackIndex}]}" "LOGGING."; then
          continue
        fi
        if isNotEmpty "${_callStack}"; then
          _callStack="->${_callStack}"
        fi
        _callStack="${FUNCNAME[${_callStackIndex}]}${_callStack}"
      fi
      if areEqual "${FUNCNAME[${_callStackIndex}]}" "main"; then
        _mainFound=${TRUE}
      fi
    fi
  done
  IFS="${_oldIFS}"

  if [[ "${_bashFlags}" =~ u ]]; then
    set -u
  else
    set +u
  fi

  if isNotEmpty "${_callStack}"; then
    _callStack=" (${_callStack})"
  fi
  _error="${_error}${_callStack}"

  if isDebugEnabled; then
    printUsage
  fi

  ERROR.printError "${_error}"
  return ${_rescode}
}

# fun: printExitValues
# api: public
# txt: Prints the exit values.
# txt: Returns 0/TRUE always.
# use: printExitValues;
function printExitValues() {

  if isTraceEnabled; then
    cat <<EOF
Exit values:
  0: No error.
EOF
    ERROR.getBuiltInErrorsVariableName
    local -n _builtinErrors=${RESULT}

    ERROR.getModuleName
    local _moduleName="${RESULT}"

    local _oldIFS="${IFS}"

    if [ ${#_builtinErrors[@]} -gt 0 ]; then
      IFS=$"${DWIFS}"
      local _i
      for ((_i = 0; _i < ${#_builtinErrors[@]}; _i++)); do
        DW.getGlobalString "${_moduleName}" "${_builtinErrors[${_i}]}"
        echo "  $((_i + 1)): ${RESULT}."
      done
    fi
    ERROR.getErrorMessagesVariableName
    local -n _errorMessages=${RESULT}
    if [ ${#_errorMessages[@]} -gt 0 ]; then
      IFS=$"${DWIFS}"
      local _j
      for ((_j = 0; _j < ${#_errorMessages[@]}; _j++)); do
        DW.getGlobalString "${_moduleName}" "${_errorMessages[${_j}]}"
        command echo "  $((_j + _i + 1)): ${RESULT}."
      done
    fi
    IFS="${_oldIFS}"
  fi
}

# fun: ERROR.printError message
# api: private
# txt: Prints given error.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: ERROR.printError "My error message.";
function ERROR.printError() {
  DW.getScriptName
  local _scriptName="${RESULT}"

  echo "${_scriptName}: $@."
}

# fun: ERROR.getBuiltInErrorsVariableName
# api: private
# txt: Returns the name of variable containing the built-in errors.
# txt: Returns 0/TRUE always.
# use: ERROR.getBuiltInErrorsVariableName;
# use: local -n builtinErrors=${RESULT};
function ERROR.getBuiltInErrorsVariableName() {
  ERROR.getModuleName
  DW.getGlobalVariableName "${RESULT}" BUILTIN_ERRORS
}

# fun: ERROR.getErrorMessagesVariableName
# api: private
# txt: Returns the name of variable containing the error messages.
# txt: Returns 0/TRUE always.
# use: ERROR.getErrorMessagesVariableName;
# use: local -n errorMessages=${RESULT};
function ERROR.getErrorMessagesVariableName() {
  ERROR.getModuleName
  DW.getGlobalVariableName "${RESULT}" ERROR_MESSAGES
}

# fun: ERROR.appendBuiltInError error
# api: private
# txt: Appends a new error to the collection of built-in errors.
# opt: error: The error to add.
# txt: Returns 0/TRUE always.
# use: ERROR.appendBuiltInError "error";
function ERROR.appendBuiltInError() {
  local _error="${1}"
  checkNotEmpty error "${_error}" 1

  ERROR.getBuiltInErrorsVariableName
  local -n _builtinErrors=${RESULT}

  if isEmpty "${_builtinErrors[@]}" || arrayDoesNotContain "${_error}" "${_builtinErrors[@]}"; then
    _builtinErrors[${#_builtinErrors[@]}]="${_error}"
  fi
}

# fun: ERROR.addBuiltInError name message
# api: private
# txt: Annotates a new built-in error.
# opt: name: The error name.
# opt: message: The error message.
# txt: Returns 0/TRUE always.
# use: ERROR.addBuiltInError INVALID_OPTION "Option unrecognized";
function ERROR.addBuiltInError() {
  local _errorName="${1}"
  checkNotEmpty name "${_errorName}" 1
  local _message="${2}"
  checkNotEmpty message "${_message}" 2

  toUpper "${_errorName}"
  local _upcasedErrorName="${RESULT}"

  ERROR.appendBuiltInError "${_upcasedErrorName}"
  ERROR.getModuleName
  DW.declareGlobalString "${RESULT}" "${_upcasedErrorName}" "${_message}"
}

# fun: ERROR.defineBuiltInErrorMessages
# api: private
# txt: Declares built-in error messages.
# txt: Returns 0/TRUE always.
# use: ERROR.defineBuiltInErrorMessages;
function ERROR.defineBuiltInErrorMessages() {
  ERROR.addBuiltInError SCRIPT_INTERRUPTED "User interruption"
  ERROR.addBuiltInError MISSING_MANDATORY_VARIABLES "Script not complete, since it doesn't define all mandatory variables"
  ERROR.addBuiltInError MISSING_MANDATORY_FUNCTIONS "Script not complete, since it doesn't define all mandatory functions"
  ERROR.addBuiltInError UNKNOWN_ERROR "The script has finished due to an unexpected error"
  ERROR.addBuiltInError UNACCEPTABLE_API_CALL "Unacceptable call: "
  ERROR.addBuiltInError POSTCONDITION_NOT_SATISFIED "Postcondition not satisfied: "
  ERROR.addBuiltInError UNACCEPTABLE_ENVIRONMENT_VARIABLE "Unacceptable environment variable: "
}

# fun: ERROR.defaultState
# api: private
# txt: Restores the default state of the module.
# txt: Returns 0/TRUE always.
# use: ERROR.defaultState
function ERROR.defaultState() {
  ERROR.defineBuiltInErrorMessages
}

# fun: ERROR.resetState
# api: private
# txt: Resets the state of the module.
# use: ERROR.resetState;
function ERROR.resetState() {
  ERROR.getModuleName
  local _moduleName="${RESULT}"
  DW.declareGlobalArray "${_moduleName}" BUILTIN_ERRORS
  DW.declareGlobalArray "${_moduleName}" ERROR_MESSAGES
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
