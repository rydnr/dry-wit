# mod: locale
# api: public
# txt: Deals with installed locales.

# fun: LOCALE.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: LOCALE.getModuleName;
# use: echo "Module: ${RESULT}";
function LOCALE.getModuleName() {
  export RESULT="LOCALE";
  return ${TRUE};
}

# fun: isLocaleSupported locale encoding
# api: public
# txt: Checks if given locale identifier is supported.
# opt: locale: The locale identifier.
# opt: encoding: The file encoding.
# txt: Returns 0/TRUE if the locale is supported; 1/FALSE otherwise.
# use: if isLocaleSupported "en_US" "UTF-8"; then
# use:   echo "en_US with UTF-8 is supported";
# use: fi
function isLocaleSupported() {
  local _locale="${1}";
  checkNotEmpty locale "${_locale}" 1;
  local _encoding="${2}";
  checkNotEmpty encoding "${_encoding}" 2;

  local -i _rescode;

  if [ -f "${SUPPORTED_LOCALES_FOLDER}/${_locale%%_*}" ]; then
    if isLocaleFileAvailable "${_locale}"; then
      if isLocaleAvailableInLanguageFile "${_locale}" "${_encoding}"; then
        _rescode=${TRUE};
      else
        _rescode=${FALSE};
      fi
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: isLocaleFileAvailable locale
# api: public
# txt: Checks if the locale file is available.
# opt: locale: The locale.
# txt: Returns 0/TRUE if the locale file exists; 1/FALSE otherwise.
# use: if isLocaleFileAvailable "en_US"; then
# use:   echo "English-US is available";
# use: fi
function isLocaleFileAvailable() {
  local _locale="${1}";
  checkNotEmpty locale "${_locale}" 1;

  local -i _rescode;

  if [ -f "${AVAILABLE_LOCALES_FOLDER}/${_locale}" ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: localeRequiresEncodingSuffix locale encoding
# api: public
# txt: Checks if locale requires appending the encoding or not.
# opt: locale: the locale.
# opt: enocding: the encoding.
# txt: Returns 0/TRUE if the locale requires the encoding suffix; 1/FALSE otherwise.
# use: if localeRequiresEncodingSuffix "${locale}" "${encoding}"; then
# use:   localeDefinition="${locale}.${encoding}";
# use: fi
function localeRequiresEncodingSuffix() {
  local _locale="${1}";
  checkNotEmpty locale "${_locale}" 1;
  local _encoding="${2}";
  checkNotEmpty encoding "${_encoding}" 2;

  grep "${_locale}.${_encoding} ${_encoding}" "${SUPPORTED_LOCALES_FILE}" > /dev/null 2>&1;
  local -i _rescode=$?;

  return ${_rescode};
}

# fun isLocaleAvailableInLanguageFile locale encoding
# api: public
# txt: Checks if given locale + encoding is supported.
# opt: locale: The locale.
# opt: encoding: The encoding.
# txt: Returns 0/TRUE if the language is supported; 1/FALSE otherwise.
# txt: The variable RESULT contains the supported locales if the funcion returns 0/TRUE.
# use: if isLocaleAvailableInLanguageFile "en_US" "UTF-8"; then
# use:   echo "Supported English locales: ${RESULT}";
# use: fi
function isLocaleAvailableInLanguageFile() {
  local _locale="$1";
  checkNotEmpty locale "${_locale}" 1;
  local _encoding="$2";
  checkNotEmpty encoding "${_encoding}" 2;

  local -i _rescode;

  if isLocaleFileAvailable "${_locale}"; then
    if localeRequiresEncodingSuffix "${_locale}" "${_encoding}"; then
      _rescode=${TRUE}; # Implicit since it greps the same file.
    else
      command grep "${_locale} ${_encoding}" "${SUPPORTED_LOCALES_FILE}" > /dev/null 2>&1;
      _rescode=$?;
    fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: changeDefaultLocale locale encoding
# api: public
# txt: Changes the default locale.
# opt: locale: The locale.
# opt: encoding: The file encoding.
# txt: Returns 0/TRUE always.
# use: changeDefaultLocale "en_US.UTF-8" "UTF-8";
function changeDefaultLocale() {
  local _locale="${1}";
  checkNotEmpty locale "${_locale}" 1;
  local _encoding="${2}";
  checkNotEmpty encoding "${_encoding}" 2;

  logInfo -n "Checking if the ${_locale}/${_encoding} pair is valid";
  if isLocaleSupported "${_locale}" "${_encoding}"; then
    logInfoResult SUCCESS "valid";
    logInfo -n "Modifying ${DEFAULT_LOCALE_FILE}";
    {
      echo "LANG=\"${_locale}.${_encoding}\"";
      echo "LANGUAGE=\"${_locale}.${_encoding}\"";
      echo "LC_ALL=\"${_locale}.${_encoding}\"";
    } > "${DEFAULT_LOCALE_FILE}";
    logInfoResult SUCCESS "done";

    logInfo -n "Modifying ${BASHLOCALE_FILE}";
    DW.getScriptName;
    local _scriptName="${RESULT}";
    {
      echo "# Generated by ${_scriptName} for locale ${_locale}.${_encoding}";
      echo "export LANG=\"${_locale}.${_encoding}\"";
      echo "export LANGUAGE=\"${_locale}.${_encoding}\"";
      echo "export LC_ALL=\"${_locale}.${_encoding}\"";
    } > "${BASH_LOCALE_FILE}";
    #  echo "export LC_CTYPE=\"${_locale}.${_encoding}\"" >> "${BASH_LOCALE_FILE}";
    logInfoResult SUCCESS "done";
  else
    logInfoResult FAILURE "invalid";
    exitWithErrorCode LOCALE_ENCODING_PAIR_IS_NOT_SUPPORTED "${_locale}/${_encoding}";
  fi
}

# fun: LOCALE.resetState
# api: private
# txt: Resets the state of the module.
# txt: Returns 0/TRUE always.
# use: LOCALE.resetState;
function LOCALE.resetState() {
  addError LOCALE_ENCODING_PAIR_IS_NOT_SUPPORTED "The provided locale-encoding pair is not supported";

  # env: DEFAULT_LOCALE_FILE: The /etc/default/locale file
  defineEnvVar DEFAULT_LOCALE_FILE MANDATORY "The /etc/default/locale file" "/etc/default/locale";

  # env: BASH_LOCALE_FILE: The /etc/bash.locale file
  defineEnvVar BASH_LOCALE_FILE MANDATORY "The /etc/bash.locale file" "/etc/bash.locale";

  # env: SUPPORTED_LOCALES_FOLDER: The folder with the supported locales
  defineEnvVar SUPPORTED_LOCALES_FOLDER MANDATORY "The folder with the supported locales" "/var/lib/locales/supported.d";

  # env: SUPPORTED_LOCALES_FILE: The file with the supported locales
  defineEnvVar SUPPORTED_LOCALES_FILE MANDATORY "The folder with the supported locales" "/usr/share/i18n/SUPPORTED";

  # env: AVAILABLE_LOCALES_FOLDER: The folder with the available locales
  defineEnvVar AVAILABLE_LOCALES_FOLDER MANDATORY "The folder with the available locales" "/usr/share/i18n/locales";
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
