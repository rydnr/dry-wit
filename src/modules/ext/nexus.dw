# mod: nexus
# api: public
# txt: Nexus 3 functions.

# fun: appendLogConfigDirToNexusSystemProperties file folder
# api: public
# txt: Appends the log-config-dir setting to given file.
# opt: file: The file to update.
# opt: folder: The log config folder.
# txt: Returns 0/TRUE if the file was updated successfully; 1/FALSE otherwise.
# use: if appendLogConfigDirToNexusSystemProperties "/opt/sonatype/nexus/etc/system.properties" "/backup/nexus-conf/"
function appendLogConfigDirToNexusSystemProperties() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _dir="${2}"
  checkNotEmpty folder "${_dir}" 2
  local -i _rescode

  echo "nexus.log-config-dir=${_dir}" >>"${_file}"
  _rescode=$?

  return ${_rescode}
}

# fun: appendWorkDirInNexusSystemProperties file workDir
# api: public
# txt: Appends the work-dir setting to given file.
# opt: file: The file to update.
# opt: workDir: The work folder.
# txt: Returns 0/TRUE if the configuration file was updated successfully; 1/FALSE otherwise.
# use: if appendWorkDirInNexusSystemProperties "/opt/sonatype/nexus/etc/system.properties" "/sonatype-work"; then ...; fi
function appendWorkDirInNexusSystemProperties() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _dir="${2}"
  checkNotEmpty workDir "${_dir}" 2
  local -i _rescode

  echo "nexus.work-dir=${_dir}" >>"${_file}" 2>/dev/null
  _rescode=$?

  return ${_rescode}
}

# fun: enableJettyHttpsConfigInNexusCfg file output
# api: public
# txt: Enables the Jetty HTTPS configuration in Nexus.
# opt: file: The nexus-default.properties file location.
# opt: output: The nexus.properties file location.
# txt: Returns 0/TRUE if the HTTPS configuration was enabled; 1/FALSE otherwise.
# use: if enableJettyHttpsConfigInNexusCfg "/opt/sonatype/nexus/etc/nexus-default.properties" "/opt-sonatype/nexus/etc/nexus.properties"; then ...; fi
function enableJettyHttpsConfigInNexusCfg() {
  local _file="${1}"
  checkNotEmpty file "${_file}" 1
  local _output="${2}"
  checkNotEmpty output "${_output}" 2
  local -i _rescode

  grep 'nexus-args' "${_file}" 2>/dev/null | sed "s|nexus-args=\(.*\)|nexus-args=\1,\${jetty.etc}/jetty-https.xml|g" >>"${_output}"
  _rescode=$?

  return ${_rescode}
}

# fun: appendHttpsConnectorPortToNexusCfg nexusCfg port
# api: public
# txt: Appends the HTTPS connector port to given file.
# opt: nexusCfg: The file to update.
# opt: port: The HTTPS port.
# txt: Returns 0/TRUE if the file was updated; 1/FALSE otherwise.
# use: if appendHttpsConnectorPortToNexusCfg "/opt/sonatype/nexus/etc/org.sonatype.nexus.cfg" 8443; then ...; fi
function appendHttpsConnectorPortToNexusCfg() {
  local _file="${1}"
  checkNotEmpty nexusCfg "${_file}" 1
  local _port="${2}"
  checkNotEmpty port "${_port}" 2
  local -i _rescode

  command echo "application-port-ssl=${_port}" >>"${_file}" 2>/dev/null
  _rescode=$?

  return ${_rescode}
}

# fun: nexusSystemPropertiesAlreadyUpdated nexusSystemProperties
# api: public
# txt: Checks if given Nexus properties file has been already updated by us.
# opt: nexusSystemProperties: The Nexus system properties file.
# txt: Returns 0/TRUE if the file was already updated; 1/FALSE otherwise.
# use: if ! nexusSystemPropertiesAlreadyUpdated /opt/sonatype/nexus3/etc/nexus.properties; then ... fi
function nexusSystemPropertiesAlreadyUpdated() {
  local _nexusSystemPropertiesFile="${1}"
  checkNotEmpty nexusSystemPropertiesFile "${_nexusSystemPropertiesFile}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"

  [[ -e "${_nexusSystemPropertiesFile}" ]] && command tail -n 1 "${_nexusSystemPropertiesFile}" | command grep "Updated by ${_scriptName}" >/dev/null 2>&1
}

# fun: appendUpdateMarkInNexusSystemProperties nexusSystemProperties
# api: public
# txt: Appends an update mark to given Nexus properties file.
# opt: nexusSystemProperties: The Nexus system properties file.
# txt: Returns 0/TRUE if the file could be updated; 1/FALSE otherwise.
# use: if ! appendUpdateMarkInNexusSystemProperties /opt/sonatype/nexus3/etc/nexus.properties; then ... fi
function appendSslEtcInNexusSystemProperties() {
  local _nexusSystemPropertiesFile="${1}"
  checkNotEmpty nexusSystemPropertiesFile "${_nexusSystemPropertiesFile}" 1
  local _sslEtc="${2}"
  checkNotEmpty sslEtc "${_sslEtc}" 2

  local -i _rescode

  command echo "ssl.etc=${_sslEtc}" >>"${_nexusSystemPropertiesFile}" 2>/dev/null
  _rescode=$?

  return ${_rescode}
}

# fun: appendUpdateMarkInNexusSystemProperties nexusSystemProperties
# api: public
# txt: Appends an update mark to given Nexus properties file.
# opt: nexusSystemProperties: The Nexus system properties file.
# txt: Returns 0/TRUE if the file could be updated; 1/FALSE otherwise.
# use: if ! appendUpdateMarkInNexusSystemProperties /opt/sonatype/nexus3/etc/nexus.properties; then ... fi
function appendUpdateMarkInNexusSystemProperties() {
  local _nexusSystemPropertiesFile="${1}"
  checkNotEmpty nexusSystemPropertiesFile "${_nexusSystemPropertiesFile}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"
  DW.import date
  now
  local _now="${RESULT}"

  command echo "# Updated by ${_scriptName} at ${_now}" >>"${_nexusSystemPropertiesFile}"
}

# fun: nexusCfgAlreadyUpdated nexusCfg
# api: public
# txt: Checks if given Nexus config file has been already updated by us.
# opt: nexusSystemProperties: The Nexus config file.
# txt: Returns 0/TRUE if the file was already updated; 1/FALSE otherwise.
# use: if ! nexusCfgAlreadyUpdated /opt/sonatype/nexus3/etc/org.sonatype.nexus.cfg; then ... fi
function nexusCfgAlreadyUpdated() {
  local _nexusCfgFile="${1}"
  checkNotEmpty nexusCfgFile "${_nexusCfgFile}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"

  [[ -e "${_nexusCfgFile}" ]] && command tail -n 1 "${_nexusCfgFile}" | command grep "Updated by ${_scriptName}" >/dev/null 2>&1
}

# fun: appendUpdateMarkInNexusCfg nexusCfg
# api: public
# txt: Appends an update mark to given Nexus config file.
# opt: nexusCfg: The Nexus config file.
# txt: Returns 0/TRUE if the file could be updated; 1/FALSE otherwise.
# use: if ! appendUpdateMarkInNexusCfg /opt/sonatype/nexus3/etc/org.sonatype.nexus.cfg; then ... fi
function appendUpdateMarkInNexusCfg() {
  local _nexusCfg="${1}"
  checkNotEmpty nexusCfg "${_nexusCfg}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"
  DW.import date
  now
  local _now="${RESULT}"

  command echo "# Updated by ${_scriptName} at ${_now}" >>"${_nexusCfg}"
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
