# mod: github
# api: public
# txt: github-related functions

# fun: retrieveLatestRemoteTagInGithub owner repo token?
# api: public
# txt: Retrieves the latest remote tag in a github repository.
# opt: owner: The repository owner.
# opt: repo: The repository name.
# opt: token: The github token. Optional.
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the tag.
# use: if retrieveLatestRemoteTagInGithub rydnr "nix-flake-to-graphviz"; then echo "Latest tag: ${RESULT}"; fi
function retrieveLatestRemoteTagInGithub() {
  local _owner="${1}";
  checkNotEmpty owner "${_owner}" 1;
  local _repo="${2}";
  checkNotEmpty repo "${_repo}" 2;
  local _token="${3}";

  retrieveLatestRemoteTagInGithubMatching "${_owner}" "${_repo}" '^v?[0-9]+\.[0-9]+\.[0-9]+$' "${_token}";
}

# fun: retrieveLatestRemoteTagInGithubMatching owner repo regex token?
# api: public
# txt: Retrieves the latest remote tag in a github repository matching a regex.
# opt: owner: The repository owner.
# opt: repo: The repository name.
# opt: token: The github token. Optional.
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the tag.
# use: if retrieveLatestRemoteTagInGithubMatching rydnr "nix-flake-to-graphviz"; then echo "Latest tag: ${RESULT}"; fi
function retrieveLatestRemoteTagInGithubMatching() {
  local _owner="${1}";
  checkNotEmpty owner "${_owner}" 1;
  local _repo="${2}";
  checkNotEmpty repo "${_repo}" 2;
  local _regex="${3}";
  checkNotEmpty regex "${_regex}" 3;
  local _token="${4}";

  local -i _rescode=${FALSE};
  local _result;

  # GitHub API URL for fetching tags
  local _apiUrl="https://api.github.com/repos/${_owner}/${_repo}/tags"

  # Using GitHub API to get tags
  # The token is optional but helps to avoid rate limits
  local _auth=();
  if ! isEmpty "${_token}"; then
    _auth+=("-H" "Authorization: token ${_token}");
  fi

  local _error;
  local _tags;
  local _tag;
  local -i _page=1
  local -i _perPage=100
  local _result=""

  DW.import curl;
  # Loop through pages
  while true; do
    # Fetch a page of tags
    curlGet "${_apiUrl}?page=${_page}&per_page=${_perPage}" "${_auth[@]}";
    _rescode=$?;
    local _response="${RESULT}";
    local _responseCode="${STATUS}";
    if isFalse ${_rescode} || areNotEqual "${_responseCode}" "200"; then
      _error="${ERROR}";
      break;
    fi

    _tags=$(command echo "${_response}" | command jq -r '.[].name' 2>&1)
    _rescode=$?;
    if isFalse ${_rescode}; then
      _error="${_tags}";
      break;
    fi

    # Break if no tags are found
    if isEmpty "${_tags}"; then
      break;
    fi

    # Check each tag
    for _tag in ${_tags}; do
      if [[ ${_tag} =~ ${_regex} ]]; then
        _result="${_tag}";
        _rescode=${TRUE};
        break
      fi
    done

    # Break if found
    if isTrue ${_rescode}; then
      break
    fi

    # Increment page number
    ((_page++))
  done

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  elif ! isEmpty "${_error}"; then
    export ERROR="${_error}";
  fi

  return ${_rescode};
}

# fun: checkGithubTokenValid token
# api: public
# txt: Checks if given Github token is valid.
# opt: token: The token to check.
# txt: Returns 0/TRUE if the token is valid; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR will contain the HTTP status code of the error.
# use: if checkGithubTokenValid "${token}"; then
# use:   echo "${token} is valid";
# use: fi
function checkGithubTokenValid() {
  local _token="${1}";
  checkNotEmpty token "${_token}" 1;

  local -i _rescode=${FALSE};

  DW.import curl;
  curlGet "https://api.github.com/user" "Authorization: token ${_token}";
  _rescode=$?;
  local _response="${RESULT}";

  if isTrue ${_rescode}; then
    local _responseCode="${STATUS}";
    if areNotEqual "${_responseCode}" 200; then
      _rescode=${FALSE};
    fi
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_response}";
  else
    export ERROR="${_response}";
  fi

  return ${_rescode};
}

# fun: extractOwnerFromGithubUrl url
# api: public
# txt: Extracts the owner from a Github url.
# opt: url: The github url.
# txt: Returns 0/TRUE if the owner could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the owner.
# use: if extractOwnerFromGithubUrl "${url}"; then
# use:   echo "owner: ${RESULT}";
# use: fi
function extractOwnerFromGithubUrl() {
  local _url="${1}";
  checkNotEmpty url "${_url}" 1;

  local -i _rescode=${FALSE};
  local _result;

  _result="$(command echo "${_url}" | command sed -n "s|https://github\.com/\([^/]*\)/.*|\1|p")";
  _rescode=$?;

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: extractRepoFromGithubUrl url
# api: public
# txt: Extracts the repo from a Github url.
# opt: url: The github url.
# txt: Returns 0/TRUE if the repo could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the repository.
# use: if extractRepoFromGithubUrl "${url}"; then
# use:   echo "repo: ${RESULT}";
# use: fi
function extractRepoFromGithubUrl() {
  local _url="${1}";
  checkNotEmpty url "${_url}" 1;

  local -i _rescode=${FALSE};
  local _result;

  _result="$(command echo "${_url}" | command sed -n "s|https://github\.com/\([^/]*\)/\([^/]*\)|\2|p")";
  _rescode=$?;

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: gitAddAll repo
# api: public
# txt: Adds all modified files to the index.
# opt: repo: The repository folder.
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the output.
# txt: Otherwise the variable ERROR will contain information about the error.
# use: if gitAddAll "${repoFolder}"; then
# use:   ...
# use: fi
function gitAddAll() {
  local _repo="${1}";
  checkNotEmpty repo "${_repo}" 1;

  local -i _rescode=${FALSE};

  local _result;
  _result="$(command git -C "${_repo}" add --all 2>&1)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: deleteGithubRepo org owner token
# api: public
# txt: Deletes a github repository.
# opt: org: The Github organization.
# opt: owner: The Github owner.
# opt: token: The Github token.
# txt: Returns 0/TRUE if the repository gets deleted; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR will contain information about the error.
# use: if deleteGithubRepo "rydnr" "removeme" "${token}"; then
# use:   echo "rydnr/removeme deleted";
# use: fi
function deleteGithubRepo() {
  local _owner="${1}";
  checkNotEmpty owner "${_owner}" 1;
  local _repo="${2}";
  checkNotEmpty repo "${_repo}" 2;
  local _token="${3}";
  checkNotEmpty token "${_token}" 3;

  local -i _rescode;
  local _result;
  _result="$(command curl -s -X DELETE -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${_token}" https://api.github.com/repos/${_owner}/${_repo})";
  _rescode=$?;
  if isNotEmpty "${_result}" && contains "${_result}" "Bad credentials"; then
    export ERROR="${_result}";
    _rescode=${FALSE};
  fi
  echo "${_result}"

  return ${_rescode};
}

checkReq curl;
checkReq git;
checkReq sed;
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
