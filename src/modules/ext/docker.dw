# mod: docker
# api: public
# txt: Docker-related functions.

# fun: connectDockerContainerToNetwork container network
# api: public
# txt: Connects a container to given network.
# opt: container: The Docker container.
# opt: network: The network.
# txt: Returns 0/TRUE if the container was connected to the network; 1/FALSE otherwise.
# txt: The variable RESULT contains the output of the command, either in case of success or failure.
# use: if connectDockerContainerToNetwork container my_network; then echo "Container added to my_network network"; fi
function connectDockerContainerToNetwork() {
  local _container="${1}";
  checkNotEmpty container "${_container}" 1;
  local _network="${2}";
  checkNotEmpty network "${_network}" 2;

  local -i _rescode;
  local _output;

  logDebug -n "Checking if ${_container} container already exists";
  if dockerContainerExists ${_container}; then
    _output="${RESULT}";
    logDebugResult SUCCESS "true";

    logDebug -n "Connecting ${_container} to ${_network} network";
    debugEcho "docker network connect ${_network} ${_container}";
    if dockerCommand network connect ${_network} ${_container}; then
      _output="${RESULT}";
      logDebugResult SUCCESS "done";
      export RESULT="${_output}";
      _rescode=${TRUE};
    else
      _output="${ERROR:-}";
      logDebugResult FAILURE "failed";
      _rescode=${FALSE};
    fi
  else
    _output="${ERROR:-}";
    logDebugResult FAILURE "false";
  fi

  if isFalse ${_rescode}; then
    export ERROR="${_output}";
  fi

  return ${_rescode};
}

# fun: copyToDockerContainer file container containerFolder
# api: public
# txt: Copies a file to a Docker container.
# opt: file: The file to copy.
# opt: container: The container name.
# opt: containerFolder: The target location.
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information.
# use: if copyToDockerContainer "my-file" "container" "/tmp"; then echo "my-file copied to container:/tmp successfully"; fi
function copyToDockerContainer() {
  local _file="${1}";
  checkNotEmpty file "${_file}" 1;
  local _containerName="${2}";
  checkNotEmpty container "${_containerName}" 2;
  local _targetLocation="${3}";
  checkNotEmpty containerFolder "${_targetLocation}" 3;

  local -i _rescode;

  local _output
  _output="$(docker cp "${_file}" "${_containerName}":"${_targetLocation}" 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_output}" && contains "${_output}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="docker cp \"${_file}\" \"${_containerName}\":\"${_targetLocation}\";\n${_output}"
  else
    _rescode=${TRUE}
    export RESULT="${_output}"
  fi

  return ${_rescode};
}

# fun: createDockerNetwork network
# api: public
# txt: Creates a Docker network.
# opt: network: The network name.
# txt: Returns 0/TRUE if the network was created successfully; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains some information about the error.
# use: if createDockerNetwork bridge; then echo "bridge network created"; fi
function createDockerNetwork() {
  local _network="${1}";
  checkNotEmpty network "${_network}" 1;

  local -i _rescode;

  if ! dockerNetworkExists ${_network}; then
    if dockerCommand network create ${_network}; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: dockerCommand command args*
# api: public
# txt: Runs a Docker command.
# opt: command: The Docker command.
# opt: args: The command arguments (if any).
# txt: Returns 0/TRUE if the operation succeeds; 1/FALSE otherwise.
# use: if dockerCommand create -v /config --name config busybox; then
# use:   echo "config container created successfully";
# use: fi
function dockerCommand() {
  local _args="${@}";
  checkNotEmpty command "${_args}" 1;

  local -i _rescode;

  local _output
  _output="$(docker ${_args} 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_output}" && contains "${_output}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="docker ${_args};\n${_output}"
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: dockerContainerExists container
# api: public
# txt: Checks if given container exists.
# opt: container: The container name.
# txt: Returns 0/TRUE if the container exists; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the hash of the container.
# use: if dockerContainerExists "config"; then echo "'config' container already exists (${RESULT})"; fi
function dockerContainerExists() {
  local _name="${1}";
  checkNotEmpty name "${_name}" 1;

  local -i _rescode;

  local _result
  _result="$(docker ps -a --no-trunc --filter name=^/${_name}$ -q 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_result}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="docker ps -a --no-trunc --filter name=^/${_name}$ -q;\n${_result}"
  else
    _rescode=${TRUE};
  fi

  if    isFalse ${_rescode} \
     || isEmpty "${_result}"; then
    _rescode=${FALSE};
    export ERROR="docker ps -a --no-trunc --filter name=^/${_name}$ -q failed or returned nothing";
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: dockerNetworkExists network
# api: public
# txt: Checks if given network exists.
# opt: network: The network name.
# txt: Returns 0/TRUE if the network exists; 0/FALSE otherwise.
# use: if dockerNetworkExists "bridge"; then
# use:   echo "'bridge' network already exists";
# use: fi
function dockerNetworkExists() {
  local _name="${1}";
  checkNotEmpty name "${_name}" 1;
  local _result;
  local -i _rescode;

  local _output
  _output="$(docker network inspect ${_name} 2> /dev/null || echo "$$.ERROR.$$")";
  if isNotEmpty "${_output}" && contains "${_output}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="docker network inspect ${_name};\n${_output}"
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: isDockerContainerRunning container
# api: public
# txt: Checks if a container is running.
# opt: container: the container name.
# txt: Returns 0/TRUE if the container is running; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information.
# use: if isDockerContainerRunning mysql; then echo "mysql is running"; fi
function isDockerContainerRunning() {
  local _containerName="${1}";
  checkNotEmpty container "${_containerName}" 1;

  local -i _rescode;

  ## Note: docker is a requirement of the caller script, not dry-wit.
  local _status
  _status="$(docker inspect ${_containerName} -f '{{json .State.Running}}' 2>&1)";

  if [[ "${_status}" == "true" ]]; then
    _rescode=${TRUE};
  else
    export ERROR="${_status}";
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: removeDockerNetwork network
# api: public
# txt: Removes a Docker network.
# opt: network: The Docker network.
# txt: Returns 0/TRUE if the network was deleted successfully; 1/FALSE otherwise.
# use: if removeDockerNetwork bridge; then echo "bridge network removed"; fi
function removeDockerNetwork() {
  local _network="${1}";
  checkNotEmpty network "${_network}" 1;

  local -i _rescode;

  if dockerNetworkExists ${_network}; then
    if dockerCommand network rm ${_network}; then
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: retrieveDockerContainerStatus container
# api: public
# txt: Retrieves the status of given container.
# opt: container: The container name.
# txt: Returns 0/TRUE if the container status could be obtained; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the status.
# use: if retrieveDockerContainerStatus mysql; then
# use:   echo "mysql's status is ${RESULT}";
# use: fi
function retrieveDockerContainerStatus() {
  local _containerName="${1}";
  checkNotEmpty container "${_containerName}" 1;

  local -i _rescode;

  ## Note: docker is a requirement of the caller script, not dry-wit.
  local _result
  _result="$(docker inspect ${_containerName} -f {{json .State.Status}} 2>&1 || echo "$$.ERROR.$$")";
  if isNotEmpty "${_output}" && contains "${_result}" "$$.ERROR.$$"; then
    _rescode=${FALSE};
    export ERROR="docker inspect ${_containerName} -f {{json .State.Status}};\n${_result}"
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrievePortsFromDockerfile dockerfile
# api: public
# txt: Retrieves the exposed ports in given Dockerfile.
# opt: dockerfile: The dockerfile
# txt: Returns 0/TRUE if the ports could be retrieved; 1/FALSE otherwise.
# txt: If the ports are found, the variable RESULT contains a space-separated list of ports exposed in the Dockerfile.
# use: if retrievePortsFromDockerfile /Dockerfiles/Dockerfile; then echo "Exposed ports in the Dockerfile: ${RESULT}"; fi
function retrievePortsFromDockerfile() {
  local _dockerfile="${1}";
  checkNotEmpty dockerfile "${_dockerfile}" 1;

  local -a _result=();

  local -i _rescode=${FALSE};

  local _oldIFS="${IFS}";
  IFS=$'\n';
  local _aux;
  for _aux in $(grep EXPOSE "${_dockerfile}" | cut -d' ' -f 2- | sed -e 's/^ \+//g'); do
    IFS=$' ';
    local _p;
    for _p in ${_aux}; do
      IFS="${_oldIFS}";
      _rescode=${TRUE};
      if ! arrayContains "${_p}" "${_result[@]}"; then
        _result[${#_result[@]}]="${_p}";
      fi
    done
    IFS="${_oldIFS}";
  done
  IFS="${_oldIFS}";

  if isTrue ${_rescode}; then
    export RESULT=${_result[@]};
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
