# Copyright 2023-today Automated Computing Machinery S.L.
# Distributed under the terms of the GNU General Public License v3

# fun: extractOrgFromFlakeNix flakeFile
# api: public
# txt: Retrieves the value of the "org" variable in the flake.
# opt: flakeFile: The flake file.
# txt: Returns 0/TRUE if the "org" value could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, RESULT will contain the "org" value.
# use: if extractOrgFromFlakeNix "~/flake.nix"; then
# use:   echo "org -> ${RESULT}"
# use: fi
function extractOrgFromFlakeNix() {
  local _flakeFile="${1}";
  checkNotEmpty flakeFile "${_flakeFile}" 1;

  local -i _rescode;
  local _result;
  _result="$(grep -oP '(?<=org = ")[^"]+' "${_flakeFile}")";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
    export ERROR="";
  else
    export RESULT="";
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: extractRepoFromFlakeNix flakeFile
# api: public
# txt: Retrieves the value of the "repo" variable in the flake.
# opt: flakeFile: The flake file.
# txt: Returns 0/TRUE if the "repo" value could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, RESULT will contain the "repo" value.
# use: if extractRepoFromFlakeNix "~/flake.nix"; then
# use:   echo "repo -> ${RESULT}"
# use: fi
function extractRepoFromFlakeNix() {
  local _flakeFile="${1}";
  checkNotEmpty flakeFile "${_flakeFile}" 1;

  local -i _rescode;
  local _result;
  _result="$(grep -oP '(?<=repo = ")[^"]+' "${_flakeFile}")";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
    export ERROR="";
  else
    export RESULT="";
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: extractVersionFromFlakeNix flakeFile
# api: public
# txt: Retrieves the value of the "version" variable in the flake.
# opt: flakeFile: The flake file.
# txt: Returns 0/TRUE if the "version" value could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, RESULT will contain the "repo" value.
# use: if extractVersionFromFlakeNix "~/flake.nix"; then
# use:   echo "version -> ${RESULT}"
# use: fi
function extractVersionFromFlakeNix() {
  local _flakeFile="${1}";
  checkNotEmpty flakeFile "${_flakeFile}" 1;

  local -i _rescode;
  local _result;
  _result="$(grep -oP '(?<=version = ")[^"]+' "${_flakeFile}")";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
    export ERROR="";
  else
    export RESULT="";
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: fetchSha256FromUrl url rev
# api: public
# txt: Fetches the checksum using nix-prefetch-git.
# opt: url: The url of the git repository.
# opt: rev: The revision.
# txt: Returns 0/TRUE if the sha256 value could be fetched; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, RESULT will contain the "sha256" hash.
# txt: If the function returns 1/FALSE, ERROR will contain the error message.
# use: if fetchSha256FromUrl "https://github.com/my_org/my_repo" "0.0.1"; then
# use:   echo "sha256: ${RESULT}";
# use: fi
function fetchSha256FromUrl() {
  local _url="${1}";
  checkNotEmpty url "${_url}" 1;
  local _rev="${2}"
  checkNotEmpty rev "${_rev}" 2;

  local -i _rescode;
  local _result;
  _result="$(nix-prefetch-git --quiet "${_url}" --rev "${_rev}" 2>&1 | jq -r '.sha256' 2>/dev/null)";
  _rescode=$?;

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
    export ERROR="";
  else
    export RESULT="";
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: updateVersionInFlakeNix flakeFile version
# api: public
# txt: Updates the "version" variable in a PythonEDA Nix flake.
# opt: flakeFile: The flake file.
# txt: Returns 0/TRUE if the "version" value could be updated; 1/FALSE otherwise.
# use: if updateVersionInFlakeNix "~/flake.nix" "0.0.2"; then
# use:   echo "version updated";
# use: fi
function updateVersionInFlakeNix() {
  local _flakeFile="${1}";
  checkNotEmpty flakeFile "${_flakeFile}" 1;
  local _version="${2}";
  checkNotEmpty version "${_version}" 1;

  local -i _rescode;
  sed -i "s/version = \".*\";/version = \"${_version}\";/" "${_flakeFile}";
  _rescode=$?;

  return ${_rescode};
}

# fun: updateSha256InFlakeNix flakeFile version
# api: public
# txt: Updates the "sha256" variable in a PythonEDA Nix flake.
# opt: flakeFile: The flake file.
# txt: Returns 0/TRUE if the "sha256" value could be updated; 1/FALSE otherwise.
# use: if updateSha256InFlakeNix "~/flake.nix" "sha256-aaaaaaaaaaaaaaaa"; then
# use:   echo "sha256 updated";
# use: fi
function updateSha256InFlakeNix() {
  local _flakeFile="${1}";
  checkNotEmpty flakeFile "${_flakeFile}" 1;
  local _sha256="${2}";
  checkNotEmpty sha256 "${_sha256}" 1;

  local -i _rescode;
  sed -i "s/sha256 = \".*\";/sha256 = \"${_sha256}\";/" "${_flakeFile}";
  _rescode=$?;

  return ${_rescode};
}

# fun: extractInputsFromFlakeLock flakeLockFile
# api: public
# txt: Retrieves the inputs declared in given file.
# opt: flakeLockFile: The flake.lock file.
# txt: Returns 0/TRUE if the inputs could be extracted; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain a space-separated list of inputName:owner/repo/tag entries.
# use: if extractInputsFromFlakeLock "flake.lock"; then
# use:   echo "inputs: ${RESULT}";
# use: fi
function extractInputsFromFlakeLock() {
  local _flakeLock="${1}";
  checkNotEmpty flakeLockFile "${_flakeLock}" 1;

  local _result="";
  local -i _rescode=${FALSE};

  local _root;
  _root="$(command jq -r '.root' "${_flakeLock}")"

  local _input;
  local -i _firstTime=${TRUE};
  local _inputs;
  _inputs="$(command jq -r --arg root "${_root}" '.nodes[$root].inputs | to_entries[] | .value' "${_flakeLock}")";

  local _origIFS="${IFS}";
  IFS="${DWIFS}";
  for _input in ${_inputs}; do
    IFS=${_origIFS};
    # Extract the owner, repo, and ref values for each input
    local _owner;
    _owner=$(jq -r --arg input "${_input}" '.nodes[$input].original.owner' "${_flakeLock}")
    local _repo;
    _repo=$(jq -r --arg input "${_input}" '.nodes[$input].original.repo' "${_flakeLock}")
    local _ref;
    _ref=$(jq -r --arg input "${_input}" '.nodes[$input].original.ref' "${_flakeLock}")

    if isFalse ${_firstTime}; then
      _result="${_result} ";
    else
      _firstTime=${FALSE};
    fi

    _result="${_result}${_input}:${_owner}/${_repo}/${_ref}";
    _rescode=${TRUE};
  done
  IFS=${_origIFS};

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: updateInputsInFlakeNix  oldUrl newUrl flakeNix
# api: public
# txt: Updates the version of an input in given flake.nix file.
# opt: oldUrl: The old url.
# opt: newUrl: The new url.
# opt: flakeNix: The flake.nix file.
# txt: Returns 0/TRUE if the version of the input gets updated successfully; 1/FALSE otherwise.
# use: if updateInputsInFlakeNix "github:nixos/nixpkgs/23.05" "github:nixos/nixpkgs/23.11" "${PWD}/flake.nix"; then
# use:   echo "nixpks updated successfully";
# use: fi
function updateInputsInFlakeNix() {
  local _oldUrl="${1}";
  checkNotEmpty oldUrl "${_oldUrl}" 1;
  local _newUrl="${2}";
  checkNotEmpty newUrl "${_newUrl}" 2;
  local _flakeNix="${3}";
  checkNotEmpty flakeNix "${_flakeNix}" 3;

  local -i _rescode=${FALSE};
  local _result;

  command sed -i "s ${_oldUrl} ${_newUrl} g" "${_flakeNix}" 2>&1;
  _rescode=$?;

  return ${_rescode};
}

# fun: updateFlakeLock flakeNix
# api: public
# txt: Updates the flake.lock file.
# opt: flakeNix: The flake.nix file.
# txt: Returns 0/TRUE if the flake.lock file gets updated successfully; 1/FALSE otherwise.
# use: if updateFlakeLock "${PWD}/flake.nix"; then
# use:   echo "flake.lock updated successfully";
# use: fi
function updateFlakeLock() {
  local _flakeNix="${1}";
  checkNotEmpty flakeNix "${_flakeNix}" 3;

  local -i _rescode=${FALSE};
  local _result;

  local _flakeFolder;
  _flakeFolder="$(dirname "${_flakeNix}")";

  _result="$(command nix flake update "${_flakeFolder}" 2>&1)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
