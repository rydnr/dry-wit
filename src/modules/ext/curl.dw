# mod: curl
# api: public
# txt: curl-related functions

# fun: curlGet url headers?
# api: public
# txt: Sends a GET request using curl to given url.
# opt: url: The url to access.
# opt: headers: The headers to use. Optional.
# txt: Returns 0/TRUE if the url could be accessed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the response data.
# txt: If the function returns 0/TRUE, the variable STATUS will contain the HTTP status code.
# txt: If the function returns 1/FALSE, the variable ERROR will contain information about the error.
# use: if curlGet "${myUrl}"; then
# use:   local status="${STATUS}";
# use:   if areEqual "${status}" 200; then
# use:     local data="${RESULT}";
# use:     echo "${url} -> ${data}";
# use:   else
# use:     echo "${url} responded with ${status}";
# use:   fi
# use: fi
function curlGet() {
  local _url="${1}";
  checkNotEmpty url "${_url}" 1;
  shift;
  local -a _headers=("${@}");

  local _output;
  _output="$(command curl -s "${_headers[@]}" -w "%{http_code}" "${_url}" 2>&1)";
  local -i _rescode=$?;

  if isFalse ${_rescode}; then
    export ERROR="${_output}";
  else
    local -i _lineCount;
    _lineCount="$(command echo "${_output}" | command wc -l)";
    local _result;
    _result="$(command echo "${_output}" | command head -n $((_lineCount - 1)))";
    export RESULT="${_result}";
    local _status;
    _status="$(command echo "${_output}" | command tail -n 1)";
    export STATUS="${_status}";
  fi

  return ${_rescode};
}

checkReq curl;
checkReq head;
checkReq tail;
checkReq wc;
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
