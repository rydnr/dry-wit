# mod: curl
# api: public
# txt: curl-related functions

# fun: curlGet url headers?
# api: public
# txt: Sends a GET request using curl to given url.
# opt: url: The url to access.
# opt: headers: The headers to use. Optional.
# txt: Returns 0/TRUE if the url could be accessed; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the response data.
# txt: If the function returns 0/TRUE, the variable STATUS will contain the HTTP status code.
# txt: If the function returns 1/FALSE, the variable ERROR will contain information about the error.
# use: if curlGet "${myUrl}"; then
# use:   local status="${STATUS}";
# use:   if areEqual "${status}" 200; then
# use:     local data="${RESULT}";
# use:     echo "${url} -> ${data}";
# use:   else
# use:     echo "${url} responded with ${status}";
# use:   fi
# use: fi
function curlGet() {
  local _url="${1}"
  checkNotEmpty url "${_url}" 1
  shift
  local -a _headers=("${@}")

  checkReq tail
  checkReq grep

  local _output
  _output="$(command curl -s "${_headers[@]}" -w "%{http_code}" "${_url}" 2>&1)"
  command echo "${_output}" | command tail -n 1 | command grep '200' >/dev/null 2>&1
  local -i _rescode=$?

  if isFalse ${_rescode}; then
    _rescode=${FALSE}
    export ERROR="${_output}"
  else
    _rescode=${TRUE}
    local -i _lineCount
    checkReq wc
    _lineCount="$(command echo "${_output}" | command wc -l)"
    local _result
    checkReq head
    _result="$(command echo "${_output}" | command head -n $((_lineCount - 1)))"
    export RESULT="${_result}"
    local _status
    _status="$(command echo "${_output}" | command tail -n 1)"
    export STATUS="${_status}"
  fi

  return ${_rescode}
}

# fun: curlDownload url file
# api: public
# txt: Downloads a file from the given url and saves it to the given file.
# opt: url: The url to download from.
# opt: file: The file to save the downloaded data to.
# txt: Returns 0/TRUE if the download was successful; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR will contain information about the error.
# use: if curlDownload "${myUrl}" "${myFile}"; then
# use:   echo "Downloaded ${myUrl} to ${myFile}";
# use: else
# use:   echo "Failed to download ${myUrl} to ${myFile}: ${ERROR}";
# use: fi
function curlDownload() {
  local _url="${1}"
  checkNotEmpty url "${_url}" 1
  local _file="${2}"
  checkNotEmpty file "${_file}" 2

  local -i _rescode=${FALSE}
  local _output
  _output="$(command curl -s -o "${_file}" "${_url}" 2>&1 || command echo "$$.ERROR.$$")"
  if isNotEmpty "${_output}" && contains "${_output}" "$$.ERROR.$$"; then
    _rescode=${FALSE}
    export ERROR="${_output}"
  else
    _rescode=${TRUE}
  fi

  return ${_rescode}
}

checkReq curl
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
