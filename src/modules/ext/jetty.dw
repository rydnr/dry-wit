# mod: jetty
# api: public
# txt: Some Jetty-related functions.

# fun: updateKeyStorePathInJettyConf keyStorePath configFile
# api: public
# txt: Updates the keystore path in given Jetty config file.
# opt: keystorePath: The keystore path.
# opt: configFile: The Jetty config file.
# txt: Returns 0/TRUE if the configuration file was updated successfully; 1/FALSE otherwise.
# use: if  updateKeyStorePathInJettyConf "/etc/ssl/keystore.jks" "/etc/jetty/jetty-https.xml"; then ...; fi
function updateKeyStorePathInJettyConf() {
  local _keyStorePath="${1}"
  checkNotEmpty keyStorePath "${_keyStorePath}" 1
  local _configFile="${2}"
  checkNotEmpty configFile "${_configFile}" 2
  local -i _rescode

  sed -i "s|<Set name=\"KeyStorePath\">.*</Set>|<Set name=\"KeyStorePath\">${_keyStorePath}</Set>|g" "${_configFile}"
  _rescode=$?

  return ${_rescode}
}

# fun: updateKeyStorePasswordInJettyConf keyStorePassword configFile
# api: public
# txt: Updates the keystore password in given Jetty config file.
# opt: keyStorePassword: The keystore password.
# opt: configFile: The Jetty config file.
# txt: Returns 0/TRUE if the config file is updated successfully; 1/FALSE otherwise.
# use: if updateKeyStorePasswordInJettyConf "secret" "/etc/jetty/jetty-https.xml"; then ...; fi
function updateKeyStorePasswordInJettyConf() {
  local _keyStorePassword="${1}"
  checkNotEmpty keyStorePassword "${_keyStorePassword}" 1
  local _configFile="${2}"
  checkNotEmpty configFile "${_configFile}" 2
  local -i _rescode

  sed -i "s|<Set name=\"KeyStorePassword\">.*</Set>|<Set name=\"KeyStorePassword\">${_keyStorePassword}</Set>|g" "${_configFile}"
  _rescode=$?

  return ${_rescode}
}

# fun: updateTrustStorePathInJettyConf trustStorePath configFile
# api: public
# txt: Updates the trust store path in given Jetty config file.
# opt: trustStorePath: The trust store path.
# opt: configFile: The Jetty config file.
# txt: Returns 0/TRUE if the configuration file was updated successfully; 1/FALSE otherwise.
# use: if  updateTrustStorePathInJettyConf "/etc/ssl/keystore.jks" "/etc/jetty/jetty-https.xml"; then ...; fi
function updateTrustStorePathInJettyConf() {
  local _trustStorePath="${1}"
  checkNotEmpty trustStorePath "${_trustStorePath}" 1
  local _configFile="${2}"
  checkNotEmpty configFile "${_configFile}" 2
  local -i _rescode

  sed -i "s|<Set name=\"TrustStorePath\">.*</Set>|<Set name=\"TrustStorePath\">${_trustStorePath}</Set>|g" "${_configFile}"
  _rescode=$?

  return ${_rescode}
}

# fun: updateTrustStorePasswordInJettyConf trustStorePassword configFile
# api: public
# txt: Updates the trust store password in given Jetty config file.
# opt: trustStorePassword: The trust store password.
# opt: configFile: The Jetty config file.
# txt: Returns 0/TRUE if the config file is updated successfully; 1/FALSE otherwise.
# use: if updateTrustStorePasswordInJettyConf "secret" "/etc/jetty/jetty-https.xml"; then ...; fi
function updateTrustStorePasswordInJettyConf() {
  local _trustStorePassword="${1}"
  checkNotEmpty trustStorePassword "${_trustStorePassword}" 1
  local _configFile="${2}"
  checkNotEmpty configFile "${_configFile}" 2
  local -i _rescode

  sed -i "s|<Set name=\"TrustStorePassword\">.*</Set>|<Set name=\"TrustStorePassword\">${_trustStorePassword}</Set>|g" "${_configFile}"
  _rescode=$?

  return ${_rescode}
}

# fun: updateKeyManagerPasswordInJettyConf keyManagerPassword configFile
# api: public
# txt: Updates the key password in given Jetty config file.
# opt: keyManagerPassword: The key manader password.
# opt: configFile: The Jetty config file.
# txt: Returns 0/TRUE if the password was updated; 1/FALSE otherwise.
# use: if updateKeyManagePasswordInJettyConf "secret" "/opt/sonatype/nexus/etc/jetty-https.xml"; then ...; fi
function updateKeyManagerPasswordInJettyConf() {
  local _keyPassword="${1}"
  checkNotEmpty keyManagerPassword "${_keyPassword}" 1
  local _configFile="${2}"
  checkNotEmpty configFile "${_configFile}" 2
  local -i _rescode

  sed -i "s|<Set name=\"KeyManagerPassword\">.*</Set>|<Set name=\"KeyManagerPassword\">${_keyPassword}</Set>|g" "${_configFile}"
  _rescode=$?

  return ${_rescode}
}

# fun: jettyConfAlreadyUpdated jettyConfFile
# api: public
# txt: Checks if given Jetty config file has been already updated by us.
# opt: jettyConfFile: The Jetty config file.
# txt: Returns 0/TRUE if the file was already updated; 1/FALSE otherwise.
# use: if ! jettyConfAlreadyUpdated /opt/jetty/etc/jetty-https.xml; then ... fi
function jettyConfAlreadyUpdated() {
  local _jettyConfFile="${1}"
  checkNotEmpty jettyConfFile "${_jettyConfFile}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"

  command tail -n 1 "${_jettyConfFile}" | command grep "Updated by ${_scriptName}" >/dev/null 2>&1
}

# fun: appendUpdateMarkInJettyConf jettyConfFile
# api: public
# txt: Appends an update mark to given Jetty config file.
# opt: jettyConfFile: The Jetty config file.
# txt: Returns 0/TRUE if the file could be updated; 1/FALSE otherwise.
# use: if ! appendUpdateMarkInJettyConf /opt/sonatype/nexus3/etc/jetty/jetty-https.xml; then ... fi
function appendUpdateMarkInJettyConf() {
  local _jettyConfFile="${1}"
  checkNotEmpty jettyConfFile "${_jettyConfFile}" 1
  DW.getScriptName
  local _scriptName="${RESULT}"
  DW.import date
  now
  local _now="${RESULT}"
  echo "<!-- Updated by ${_scriptName} at ${_now} -->" >>"${_jettyConfFile}"
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
